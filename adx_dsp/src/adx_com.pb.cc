// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: adx_com.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "adx_com.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ComRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComRequest_AdxSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComRequest_AdxSlot_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComRequest_AdxSlot_Banner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComRequest_AdxSlot_Banner_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComRequest_AdxSlot_Native_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComRequest_AdxSlot_Native_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComRequest_AdxSlot_Video_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComRequest_AdxSlot_Video_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ComRequest_AdxSlot_AdxSlotType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ComRequest_Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComRequest_Device_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComRequest_Device_DeviceID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComRequest_Device_DeviceID_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ComRequest_Device_DeviceIdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ComRequest_Device_DeviceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ComRequest_Device_OS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ComRequest_Device_Carrier_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ComRequest_Device_Connection_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ComRequest_App_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComRequest_App_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComResponse_AdxSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComResponse_AdxSlot_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ComResponse_AdxSlot_AdxSlotType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_adx_5fcom_2eproto() {
  protobuf_AddDesc_adx_5fcom_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "adx_com.proto");
  GOOGLE_CHECK(file != NULL);
  ComRequest_descriptor_ = file->message_type(0);
  static const int ComRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest, adx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest, adx_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest, app_),
  };
  ComRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComRequest_descriptor_,
      ComRequest::default_instance_,
      ComRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComRequest));
  ComRequest_AdxSlot_descriptor_ = ComRequest_descriptor_->nested_type(0);
  static const int ComRequest_AdxSlot_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_AdxSlot, adx_slot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_AdxSlot, adx_slot_sequence_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_AdxSlot, adx_slot_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_AdxSlot, banner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_AdxSlot, native_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_AdxSlot, video_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_AdxSlot, price_floor_),
  };
  ComRequest_AdxSlot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComRequest_AdxSlot_descriptor_,
      ComRequest_AdxSlot::default_instance_,
      ComRequest_AdxSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_AdxSlot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_AdxSlot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComRequest_AdxSlot));
  ComRequest_AdxSlot_Banner_descriptor_ = ComRequest_AdxSlot_descriptor_->nested_type(0);
  static const int ComRequest_AdxSlot_Banner_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_AdxSlot_Banner, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_AdxSlot_Banner, height_),
  };
  ComRequest_AdxSlot_Banner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComRequest_AdxSlot_Banner_descriptor_,
      ComRequest_AdxSlot_Banner::default_instance_,
      ComRequest_AdxSlot_Banner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_AdxSlot_Banner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_AdxSlot_Banner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComRequest_AdxSlot_Banner));
  ComRequest_AdxSlot_Native_descriptor_ = ComRequest_AdxSlot_descriptor_->nested_type(1);
  static const int ComRequest_AdxSlot_Native_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_AdxSlot_Native, icon_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_AdxSlot_Native, icon_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_AdxSlot_Native, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_AdxSlot_Native, height_),
  };
  ComRequest_AdxSlot_Native_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComRequest_AdxSlot_Native_descriptor_,
      ComRequest_AdxSlot_Native::default_instance_,
      ComRequest_AdxSlot_Native_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_AdxSlot_Native, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_AdxSlot_Native, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComRequest_AdxSlot_Native));
  ComRequest_AdxSlot_Video_descriptor_ = ComRequest_AdxSlot_descriptor_->nested_type(2);
  static const int ComRequest_AdxSlot_Video_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_AdxSlot_Video, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_AdxSlot_Video, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_AdxSlot_Video, min_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_AdxSlot_Video, max_duration_),
  };
  ComRequest_AdxSlot_Video_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComRequest_AdxSlot_Video_descriptor_,
      ComRequest_AdxSlot_Video::default_instance_,
      ComRequest_AdxSlot_Video_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_AdxSlot_Video, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_AdxSlot_Video, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComRequest_AdxSlot_Video));
  ComRequest_AdxSlot_AdxSlotType_descriptor_ = ComRequest_AdxSlot_descriptor_->enum_type(0);
  ComRequest_Device_descriptor_ = ComRequest_descriptor_->nested_type(1);
  static const int ComRequest_Device_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_Device, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_Device, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_Device, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_Device, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_Device, carrier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_Device, connection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_Device, brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_Device, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_Device, user_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_Device, ip_),
  };
  ComRequest_Device_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComRequest_Device_descriptor_,
      ComRequest_Device::default_instance_,
      ComRequest_Device_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_Device, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_Device, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComRequest_Device));
  ComRequest_Device_DeviceID_descriptor_ = ComRequest_Device_descriptor_->nested_type(0);
  static const int ComRequest_Device_DeviceID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_Device_DeviceID, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_Device_DeviceID, type_),
  };
  ComRequest_Device_DeviceID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComRequest_Device_DeviceID_descriptor_,
      ComRequest_Device_DeviceID::default_instance_,
      ComRequest_Device_DeviceID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_Device_DeviceID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_Device_DeviceID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComRequest_Device_DeviceID));
  ComRequest_Device_DeviceIdType_descriptor_ = ComRequest_Device_descriptor_->enum_type(0);
  ComRequest_Device_DeviceType_descriptor_ = ComRequest_Device_descriptor_->enum_type(1);
  ComRequest_Device_OS_descriptor_ = ComRequest_Device_descriptor_->enum_type(2);
  ComRequest_Device_Carrier_descriptor_ = ComRequest_Device_descriptor_->enum_type(3);
  ComRequest_Device_Connection_descriptor_ = ComRequest_Device_descriptor_->enum_type(4);
  ComRequest_App_descriptor_ = ComRequest_descriptor_->nested_type(2);
  static const int ComRequest_App_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_App, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_App, app_category_),
  };
  ComRequest_App_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComRequest_App_descriptor_,
      ComRequest_App::default_instance_,
      ComRequest_App_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_App, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComRequest_App, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComRequest_App));
  ComResponse_descriptor_ = file->message_type(1);
  static const int ComResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComResponse, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComResponse, adx_slot_),
  };
  ComResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComResponse_descriptor_,
      ComResponse::default_instance_,
      ComResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComResponse));
  ComResponse_AdxSlot_descriptor_ = ComResponse_descriptor_->nested_type(0);
  static const int ComResponse_AdxSlot_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComResponse_AdxSlot, adx_slot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComResponse_AdxSlot, adx_slot_sequence_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComResponse_AdxSlot, adx_slot_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComResponse_AdxSlot, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComResponse_AdxSlot, template__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComResponse_AdxSlot, ext_),
  };
  ComResponse_AdxSlot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComResponse_AdxSlot_descriptor_,
      ComResponse_AdxSlot::default_instance_,
      ComResponse_AdxSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComResponse_AdxSlot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComResponse_AdxSlot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComResponse_AdxSlot));
  ComResponse_AdxSlot_AdxSlotType_descriptor_ = ComResponse_AdxSlot_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_adx_5fcom_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComRequest_descriptor_, &ComRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComRequest_AdxSlot_descriptor_, &ComRequest_AdxSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComRequest_AdxSlot_Banner_descriptor_, &ComRequest_AdxSlot_Banner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComRequest_AdxSlot_Native_descriptor_, &ComRequest_AdxSlot_Native::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComRequest_AdxSlot_Video_descriptor_, &ComRequest_AdxSlot_Video::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComRequest_Device_descriptor_, &ComRequest_Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComRequest_Device_DeviceID_descriptor_, &ComRequest_Device_DeviceID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComRequest_App_descriptor_, &ComRequest_App::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComResponse_descriptor_, &ComResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComResponse_AdxSlot_descriptor_, &ComResponse_AdxSlot::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_adx_5fcom_2eproto() {
  delete ComRequest::default_instance_;
  delete ComRequest_reflection_;
  delete ComRequest_AdxSlot::default_instance_;
  delete ComRequest_AdxSlot_reflection_;
  delete ComRequest_AdxSlot_Banner::default_instance_;
  delete ComRequest_AdxSlot_Banner_reflection_;
  delete ComRequest_AdxSlot_Native::default_instance_;
  delete ComRequest_AdxSlot_Native_reflection_;
  delete ComRequest_AdxSlot_Video::default_instance_;
  delete ComRequest_AdxSlot_Video_reflection_;
  delete ComRequest_Device::default_instance_;
  delete ComRequest_Device_reflection_;
  delete ComRequest_Device_DeviceID::default_instance_;
  delete ComRequest_Device_DeviceID_reflection_;
  delete ComRequest_App::default_instance_;
  delete ComRequest_App_reflection_;
  delete ComResponse::default_instance_;
  delete ComResponse_reflection_;
  delete ComResponse_AdxSlot::default_instance_;
  delete ComResponse_AdxSlot_reflection_;
}

void protobuf_AddDesc_adx_5fcom_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\radx_com.proto\"\315\017\n\nComRequest\022\013\n\003adx\030\001 "
    "\001(\005\022\013\n\003bid\030\002 \001(\t\022%\n\010adx_slot\030\003 \003(\0132\023.Com"
    "Request.AdxSlot\022\"\n\006device\030\004 \001(\0132\022.ComReq"
    "uest.Device\022\034\n\003app\030\005 \001(\0132\017.ComRequest.Ap"
    "p\032\275\004\n\007AdxSlot\022\023\n\013adx_slot_id\030\001 \001(\t\022\034\n\024ad"
    "x_slot_sequence_id\030\002 \001(\005\0226\n\radx_slot_typ"
    "e\030\003 \001(\0162\037.ComRequest.AdxSlot.AdxSlotType"
    "\022*\n\006banner\030\004 \001(\0132\032.ComRequest.AdxSlot.Ba"
    "nner\022*\n\006native\030\005 \001(\0132\032.ComRequest.AdxSlo"
    "t.Native\022(\n\005video\030\006 \001(\0132\031.ComRequest.Adx"
    "Slot.Video\022\023\n\013price_floor\030\007 \001(\005\032\'\n\006Banne"
    "r\022\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\032P\n\006Nati"
    "ve\022\022\n\nicon_width\030\001 \001(\005\022\023\n\013icon_height\030\002 "
    "\001(\005\022\r\n\005width\030\003 \001(\005\022\016\n\006height\030\004 \001(\005\032R\n\005Vi"
    "deo\022\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\024\n\014mi"
    "n_duration\030\003 \001(\005\022\024\n\014max_duration\030\004 \001(\005\"a"
    "\n\013AdxSlotType\022\024\n\020ADX_SLOT_UNKNOWN\020\000\022\023\n\017A"
    "DX_SLOT_BANNER\020\001\022\023\n\017ADX_SLOT_NATIVE\020\002\022\022\n"
    "\016ADX_SLOT_VIDEO\020\003\032\316\t\n\006Device\022.\n\tdevice_i"
    "d\030\001 \003(\0132\033.ComRequest.Device.DeviceID\0222\n\013"
    "device_type\030\002 \001(\0162\035.ComRequest.Device.De"
    "viceType\022!\n\002os\030\003 \001(\0162\025.ComRequest.Device"
    ".OS\022\022\n\nos_version\030\004 \001(\t\022+\n\007carrier\030\005 \001(\016"
    "2\032.ComRequest.Device.Carrier\0221\n\nconnecti"
    "on\030\006 \001(\0162\035.ComRequest.Device.Connection\022"
    "\r\n\005brand\030\007 \001(\t\022\r\n\005model\030\010 \001(\t\022\022\n\nuser_ag"
    "ent\030\t \001(\t\022\n\n\002ip\030\n \001(\t\032E\n\010DeviceID\022\n\n\002id\030"
    "\001 \001(\t\022-\n\004type\030\002 \001(\0162\037.ComRequest.Device."
    "DeviceIdType\"\356\002\n\014DeviceIdType\022\027\n\023ADX_DEV"
    "ICEID_UNKNOW\020\000\022\025\n\021ADX_DEVICEID_IMEI\020\001\022\032\n"
    "\026ADX_DEVICEID_IMEI_SHA1\020\002\022\031\n\025ADX_DEVICEI"
    "D_IMEI_MD5\020\003\022\033\n\027ADX_DEVICEID_ANDROID_ID\020"
    "\004\022 \n\034ADX_DEVICEID_ANDROID_ID_SHA1\020\005\022\037\n\033A"
    "DX_DEVICEID_ANDROID_ID_MD5\020\006\022\025\n\021ADX_DEVI"
    "CEID_IDFA\020\007\022\032\n\026ADX_DEVICEID_IDFA_SHA1\020\010\022"
    "\031\n\025ADX_DEVICEID_IDFA_MD5\020\t\022\024\n\020ADX_DEVICE"
    "ID_MAC\020\n\022\031\n\025ADX_DEVICEID_MAC_SHA1\020\013\022\030\n\024A"
    "DX_DEVICEID_MAC_MD5\020\014\"b\n\nDeviceType\022\026\n\022A"
    "DX_DEVICE_UNKNOWN\020\000\022\025\n\021ADX_DEVICE_MOBILE"
    "\020\001\022\022\n\016ADX_DEVICE_PAD\020\002\022\021\n\rADX_DEVICE_PC\020"
    "\003\"P\n\002OS\022\022\n\016ADX_OS_UNKNOWN\020\000\022\016\n\nADX_OS_IO"
    "S\020\001\022\022\n\016ADX_OS_ANDROID\020\002\022\022\n\016ADX_OS_WINDOW"
    "S\020\003\"}\n\007Carrier\022\027\n\023ADX_CARRIER_UNKNOWN\020\000\022"
    "\034\n\030ADX_CARRIER_CHINA_MOBILE\020\001\022\034\n\030ADX_CAR"
    "RIER_CHINA_UNICOM\020\002\022\035\n\031ADX_CARRIER_CHINA"
    "_TELECOM\020\003\"\235\001\n\nConnection\022\032\n\026ADX_CONNECT"
    "ION_UNKNOWN\020\000\022\027\n\023ADX_CONNECTION_WIFI\020\001\022\025"
    "\n\021ADX_CONNECTION_2G\020\002\022\025\n\021ADX_CONNECTION_"
    "3G\020\003\022\025\n\021ADX_CONNECTION_4G\020\004\022\025\n\021ADX_CONNE"
    "CTION_5G\020\005\032+\n\003App\022\016\n\006app_id\030\001 \001(\t\022\024\n\014app"
    "_category\030\002 \001(\005\"\313\002\n\013ComResponse\022\013\n\003bid\030\001"
    " \001(\t\022&\n\010adx_slot\030\002 \003(\0132\024.ComResponse.Adx"
    "Slot\032\206\002\n\007AdxSlot\022\023\n\013adx_slot_id\030\001 \001(\t\022\034\n"
    "\024adx_slot_sequence_id\030\002 \001(\005\0227\n\radx_slot_"
    "type\030\003 \001(\0162 .ComResponse.AdxSlot.AdxSlot"
    "Type\022\r\n\005price\030\004 \001(\005\022\020\n\010template\030\005 \001(\t\022\013\n"
    "\003ext\030\006 \001(\t\"a\n\013AdxSlotType\022\024\n\020ADX_SLOT_UN"
    "KNOWN\020\000\022\023\n\017ADX_SLOT_BANNER\020\001\022\023\n\017ADX_SLOT"
    "_NATIVE\020\002\022\022\n\016ADX_SLOT_VIDEO\020\003", 2349);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "adx_com.proto", &protobuf_RegisterTypes);
  ComRequest::default_instance_ = new ComRequest();
  ComRequest_AdxSlot::default_instance_ = new ComRequest_AdxSlot();
  ComRequest_AdxSlot_Banner::default_instance_ = new ComRequest_AdxSlot_Banner();
  ComRequest_AdxSlot_Native::default_instance_ = new ComRequest_AdxSlot_Native();
  ComRequest_AdxSlot_Video::default_instance_ = new ComRequest_AdxSlot_Video();
  ComRequest_Device::default_instance_ = new ComRequest_Device();
  ComRequest_Device_DeviceID::default_instance_ = new ComRequest_Device_DeviceID();
  ComRequest_App::default_instance_ = new ComRequest_App();
  ComResponse::default_instance_ = new ComResponse();
  ComResponse_AdxSlot::default_instance_ = new ComResponse_AdxSlot();
  ComRequest::default_instance_->InitAsDefaultInstance();
  ComRequest_AdxSlot::default_instance_->InitAsDefaultInstance();
  ComRequest_AdxSlot_Banner::default_instance_->InitAsDefaultInstance();
  ComRequest_AdxSlot_Native::default_instance_->InitAsDefaultInstance();
  ComRequest_AdxSlot_Video::default_instance_->InitAsDefaultInstance();
  ComRequest_Device::default_instance_->InitAsDefaultInstance();
  ComRequest_Device_DeviceID::default_instance_->InitAsDefaultInstance();
  ComRequest_App::default_instance_->InitAsDefaultInstance();
  ComResponse::default_instance_->InitAsDefaultInstance();
  ComResponse_AdxSlot::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_adx_5fcom_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_adx_5fcom_2eproto {
  StaticDescriptorInitializer_adx_5fcom_2eproto() {
    protobuf_AddDesc_adx_5fcom_2eproto();
  }
} static_descriptor_initializer_adx_5fcom_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ComRequest_AdxSlot_AdxSlotType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComRequest_AdxSlot_AdxSlotType_descriptor_;
}
bool ComRequest_AdxSlot_AdxSlotType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ComRequest_AdxSlot_AdxSlotType ComRequest_AdxSlot::ADX_SLOT_UNKNOWN;
const ComRequest_AdxSlot_AdxSlotType ComRequest_AdxSlot::ADX_SLOT_BANNER;
const ComRequest_AdxSlot_AdxSlotType ComRequest_AdxSlot::ADX_SLOT_NATIVE;
const ComRequest_AdxSlot_AdxSlotType ComRequest_AdxSlot::ADX_SLOT_VIDEO;
const ComRequest_AdxSlot_AdxSlotType ComRequest_AdxSlot::AdxSlotType_MIN;
const ComRequest_AdxSlot_AdxSlotType ComRequest_AdxSlot::AdxSlotType_MAX;
const int ComRequest_AdxSlot::AdxSlotType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ComRequest_AdxSlot_Banner::kWidthFieldNumber;
const int ComRequest_AdxSlot_Banner::kHeightFieldNumber;
#endif  // !_MSC_VER

ComRequest_AdxSlot_Banner::ComRequest_AdxSlot_Banner()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ComRequest.AdxSlot.Banner)
}

void ComRequest_AdxSlot_Banner::InitAsDefaultInstance() {
}

ComRequest_AdxSlot_Banner::ComRequest_AdxSlot_Banner(const ComRequest_AdxSlot_Banner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ComRequest.AdxSlot.Banner)
}

void ComRequest_AdxSlot_Banner::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComRequest_AdxSlot_Banner::~ComRequest_AdxSlot_Banner() {
  // @@protoc_insertion_point(destructor:ComRequest.AdxSlot.Banner)
  SharedDtor();
}

void ComRequest_AdxSlot_Banner::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComRequest_AdxSlot_Banner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComRequest_AdxSlot_Banner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComRequest_AdxSlot_Banner_descriptor_;
}

const ComRequest_AdxSlot_Banner& ComRequest_AdxSlot_Banner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adx_5fcom_2eproto();
  return *default_instance_;
}

ComRequest_AdxSlot_Banner* ComRequest_AdxSlot_Banner::default_instance_ = NULL;

ComRequest_AdxSlot_Banner* ComRequest_AdxSlot_Banner::New() const {
  return new ComRequest_AdxSlot_Banner;
}

void ComRequest_AdxSlot_Banner::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ComRequest_AdxSlot_Banner*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(width_, height_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComRequest_AdxSlot_Banner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ComRequest.AdxSlot.Banner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ComRequest.AdxSlot.Banner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ComRequest.AdxSlot.Banner)
  return false;
#undef DO_
}

void ComRequest_AdxSlot_Banner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ComRequest.AdxSlot.Banner)
  // optional int32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // optional int32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ComRequest.AdxSlot.Banner)
}

::google::protobuf::uint8* ComRequest_AdxSlot_Banner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ComRequest.AdxSlot.Banner)
  // optional int32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // optional int32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ComRequest.AdxSlot.Banner)
  return target;
}

int ComRequest_AdxSlot_Banner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComRequest_AdxSlot_Banner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComRequest_AdxSlot_Banner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComRequest_AdxSlot_Banner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComRequest_AdxSlot_Banner::MergeFrom(const ComRequest_AdxSlot_Banner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComRequest_AdxSlot_Banner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComRequest_AdxSlot_Banner::CopyFrom(const ComRequest_AdxSlot_Banner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComRequest_AdxSlot_Banner::IsInitialized() const {

  return true;
}

void ComRequest_AdxSlot_Banner::Swap(ComRequest_AdxSlot_Banner* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComRequest_AdxSlot_Banner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComRequest_AdxSlot_Banner_descriptor_;
  metadata.reflection = ComRequest_AdxSlot_Banner_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ComRequest_AdxSlot_Native::kIconWidthFieldNumber;
const int ComRequest_AdxSlot_Native::kIconHeightFieldNumber;
const int ComRequest_AdxSlot_Native::kWidthFieldNumber;
const int ComRequest_AdxSlot_Native::kHeightFieldNumber;
#endif  // !_MSC_VER

ComRequest_AdxSlot_Native::ComRequest_AdxSlot_Native()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ComRequest.AdxSlot.Native)
}

void ComRequest_AdxSlot_Native::InitAsDefaultInstance() {
}

ComRequest_AdxSlot_Native::ComRequest_AdxSlot_Native(const ComRequest_AdxSlot_Native& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ComRequest.AdxSlot.Native)
}

void ComRequest_AdxSlot_Native::SharedCtor() {
  _cached_size_ = 0;
  icon_width_ = 0;
  icon_height_ = 0;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComRequest_AdxSlot_Native::~ComRequest_AdxSlot_Native() {
  // @@protoc_insertion_point(destructor:ComRequest.AdxSlot.Native)
  SharedDtor();
}

void ComRequest_AdxSlot_Native::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComRequest_AdxSlot_Native::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComRequest_AdxSlot_Native::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComRequest_AdxSlot_Native_descriptor_;
}

const ComRequest_AdxSlot_Native& ComRequest_AdxSlot_Native::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adx_5fcom_2eproto();
  return *default_instance_;
}

ComRequest_AdxSlot_Native* ComRequest_AdxSlot_Native::default_instance_ = NULL;

ComRequest_AdxSlot_Native* ComRequest_AdxSlot_Native::New() const {
  return new ComRequest_AdxSlot_Native;
}

void ComRequest_AdxSlot_Native::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ComRequest_AdxSlot_Native*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(icon_width_, height_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComRequest_AdxSlot_Native::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ComRequest.AdxSlot.Native)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 icon_width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_width_)));
          set_has_icon_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_icon_height;
        break;
      }

      // optional int32 icon_height = 2;
      case 2: {
        if (tag == 16) {
         parse_icon_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_height_)));
          set_has_icon_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // optional int32 width = 3;
      case 3: {
        if (tag == 24) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // optional int32 height = 4;
      case 4: {
        if (tag == 32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ComRequest.AdxSlot.Native)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ComRequest.AdxSlot.Native)
  return false;
#undef DO_
}

void ComRequest_AdxSlot_Native::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ComRequest.AdxSlot.Native)
  // optional int32 icon_width = 1;
  if (has_icon_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->icon_width(), output);
  }

  // optional int32 icon_height = 2;
  if (has_icon_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->icon_height(), output);
  }

  // optional int32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional int32 height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ComRequest.AdxSlot.Native)
}

::google::protobuf::uint8* ComRequest_AdxSlot_Native::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ComRequest.AdxSlot.Native)
  // optional int32 icon_width = 1;
  if (has_icon_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->icon_width(), target);
  }

  // optional int32 icon_height = 2;
  if (has_icon_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->icon_height(), target);
  }

  // optional int32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional int32 height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ComRequest.AdxSlot.Native)
  return target;
}

int ComRequest_AdxSlot_Native::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 icon_width = 1;
    if (has_icon_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon_width());
    }

    // optional int32 icon_height = 2;
    if (has_icon_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon_height());
    }

    // optional int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComRequest_AdxSlot_Native::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComRequest_AdxSlot_Native* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComRequest_AdxSlot_Native*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComRequest_AdxSlot_Native::MergeFrom(const ComRequest_AdxSlot_Native& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icon_width()) {
      set_icon_width(from.icon_width());
    }
    if (from.has_icon_height()) {
      set_icon_height(from.icon_height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComRequest_AdxSlot_Native::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComRequest_AdxSlot_Native::CopyFrom(const ComRequest_AdxSlot_Native& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComRequest_AdxSlot_Native::IsInitialized() const {

  return true;
}

void ComRequest_AdxSlot_Native::Swap(ComRequest_AdxSlot_Native* other) {
  if (other != this) {
    std::swap(icon_width_, other->icon_width_);
    std::swap(icon_height_, other->icon_height_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComRequest_AdxSlot_Native::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComRequest_AdxSlot_Native_descriptor_;
  metadata.reflection = ComRequest_AdxSlot_Native_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ComRequest_AdxSlot_Video::kWidthFieldNumber;
const int ComRequest_AdxSlot_Video::kHeightFieldNumber;
const int ComRequest_AdxSlot_Video::kMinDurationFieldNumber;
const int ComRequest_AdxSlot_Video::kMaxDurationFieldNumber;
#endif  // !_MSC_VER

ComRequest_AdxSlot_Video::ComRequest_AdxSlot_Video()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ComRequest.AdxSlot.Video)
}

void ComRequest_AdxSlot_Video::InitAsDefaultInstance() {
}

ComRequest_AdxSlot_Video::ComRequest_AdxSlot_Video(const ComRequest_AdxSlot_Video& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ComRequest.AdxSlot.Video)
}

void ComRequest_AdxSlot_Video::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  min_duration_ = 0;
  max_duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComRequest_AdxSlot_Video::~ComRequest_AdxSlot_Video() {
  // @@protoc_insertion_point(destructor:ComRequest.AdxSlot.Video)
  SharedDtor();
}

void ComRequest_AdxSlot_Video::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComRequest_AdxSlot_Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComRequest_AdxSlot_Video::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComRequest_AdxSlot_Video_descriptor_;
}

const ComRequest_AdxSlot_Video& ComRequest_AdxSlot_Video::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adx_5fcom_2eproto();
  return *default_instance_;
}

ComRequest_AdxSlot_Video* ComRequest_AdxSlot_Video::default_instance_ = NULL;

ComRequest_AdxSlot_Video* ComRequest_AdxSlot_Video::New() const {
  return new ComRequest_AdxSlot_Video;
}

void ComRequest_AdxSlot_Video::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ComRequest_AdxSlot_Video*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(width_, max_duration_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComRequest_AdxSlot_Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ComRequest.AdxSlot.Video)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_min_duration;
        break;
      }

      // optional int32 min_duration = 3;
      case 3: {
        if (tag == 24) {
         parse_min_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_duration_)));
          set_has_min_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_duration;
        break;
      }

      // optional int32 max_duration = 4;
      case 4: {
        if (tag == 32) {
         parse_max_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_duration_)));
          set_has_max_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ComRequest.AdxSlot.Video)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ComRequest.AdxSlot.Video)
  return false;
#undef DO_
}

void ComRequest_AdxSlot_Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ComRequest.AdxSlot.Video)
  // optional int32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // optional int32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // optional int32 min_duration = 3;
  if (has_min_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->min_duration(), output);
  }

  // optional int32 max_duration = 4;
  if (has_max_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ComRequest.AdxSlot.Video)
}

::google::protobuf::uint8* ComRequest_AdxSlot_Video::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ComRequest.AdxSlot.Video)
  // optional int32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // optional int32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // optional int32 min_duration = 3;
  if (has_min_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->min_duration(), target);
  }

  // optional int32 max_duration = 4;
  if (has_max_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ComRequest.AdxSlot.Video)
  return target;
}

int ComRequest_AdxSlot_Video::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 min_duration = 3;
    if (has_min_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_duration());
    }

    // optional int32 max_duration = 4;
    if (has_max_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_duration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComRequest_AdxSlot_Video::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComRequest_AdxSlot_Video* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComRequest_AdxSlot_Video*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComRequest_AdxSlot_Video::MergeFrom(const ComRequest_AdxSlot_Video& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_min_duration()) {
      set_min_duration(from.min_duration());
    }
    if (from.has_max_duration()) {
      set_max_duration(from.max_duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComRequest_AdxSlot_Video::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComRequest_AdxSlot_Video::CopyFrom(const ComRequest_AdxSlot_Video& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComRequest_AdxSlot_Video::IsInitialized() const {

  return true;
}

void ComRequest_AdxSlot_Video::Swap(ComRequest_AdxSlot_Video* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(min_duration_, other->min_duration_);
    std::swap(max_duration_, other->max_duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComRequest_AdxSlot_Video::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComRequest_AdxSlot_Video_descriptor_;
  metadata.reflection = ComRequest_AdxSlot_Video_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ComRequest_AdxSlot::kAdxSlotIdFieldNumber;
const int ComRequest_AdxSlot::kAdxSlotSequenceIdFieldNumber;
const int ComRequest_AdxSlot::kAdxSlotTypeFieldNumber;
const int ComRequest_AdxSlot::kBannerFieldNumber;
const int ComRequest_AdxSlot::kNativeFieldNumber;
const int ComRequest_AdxSlot::kVideoFieldNumber;
const int ComRequest_AdxSlot::kPriceFloorFieldNumber;
#endif  // !_MSC_VER

ComRequest_AdxSlot::ComRequest_AdxSlot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ComRequest.AdxSlot)
}

void ComRequest_AdxSlot::InitAsDefaultInstance() {
  banner_ = const_cast< ::ComRequest_AdxSlot_Banner*>(&::ComRequest_AdxSlot_Banner::default_instance());
  native_ = const_cast< ::ComRequest_AdxSlot_Native*>(&::ComRequest_AdxSlot_Native::default_instance());
  video_ = const_cast< ::ComRequest_AdxSlot_Video*>(&::ComRequest_AdxSlot_Video::default_instance());
}

ComRequest_AdxSlot::ComRequest_AdxSlot(const ComRequest_AdxSlot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ComRequest.AdxSlot)
}

void ComRequest_AdxSlot::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  adx_slot_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adx_slot_sequence_id_ = 0;
  adx_slot_type_ = 0;
  banner_ = NULL;
  native_ = NULL;
  video_ = NULL;
  price_floor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComRequest_AdxSlot::~ComRequest_AdxSlot() {
  // @@protoc_insertion_point(destructor:ComRequest.AdxSlot)
  SharedDtor();
}

void ComRequest_AdxSlot::SharedDtor() {
  if (adx_slot_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adx_slot_id_;
  }
  if (this != default_instance_) {
    delete banner_;
    delete native_;
    delete video_;
  }
}

void ComRequest_AdxSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComRequest_AdxSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComRequest_AdxSlot_descriptor_;
}

const ComRequest_AdxSlot& ComRequest_AdxSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adx_5fcom_2eproto();
  return *default_instance_;
}

ComRequest_AdxSlot* ComRequest_AdxSlot::default_instance_ = NULL;

ComRequest_AdxSlot* ComRequest_AdxSlot::New() const {
  return new ComRequest_AdxSlot;
}

void ComRequest_AdxSlot::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ComRequest_AdxSlot*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(adx_slot_sequence_id_, adx_slot_type_);
    if (has_adx_slot_id()) {
      if (adx_slot_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        adx_slot_id_->clear();
      }
    }
    if (has_banner()) {
      if (banner_ != NULL) banner_->::ComRequest_AdxSlot_Banner::Clear();
    }
    if (has_native()) {
      if (native_ != NULL) native_->::ComRequest_AdxSlot_Native::Clear();
    }
    if (has_video()) {
      if (video_ != NULL) video_->::ComRequest_AdxSlot_Video::Clear();
    }
    price_floor_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComRequest_AdxSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ComRequest.AdxSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string adx_slot_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adx_slot_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adx_slot_id().data(), this->adx_slot_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "adx_slot_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_adx_slot_sequence_id;
        break;
      }

      // optional int32 adx_slot_sequence_id = 2;
      case 2: {
        if (tag == 16) {
         parse_adx_slot_sequence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adx_slot_sequence_id_)));
          set_has_adx_slot_sequence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_adx_slot_type;
        break;
      }

      // optional .ComRequest.AdxSlot.AdxSlotType adx_slot_type = 3;
      case 3: {
        if (tag == 24) {
         parse_adx_slot_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ComRequest_AdxSlot_AdxSlotType_IsValid(value)) {
            set_adx_slot_type(static_cast< ::ComRequest_AdxSlot_AdxSlotType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_banner;
        break;
      }

      // optional .ComRequest.AdxSlot.Banner banner = 4;
      case 4: {
        if (tag == 34) {
         parse_banner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_banner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_native;
        break;
      }

      // optional .ComRequest.AdxSlot.Native native = 5;
      case 5: {
        if (tag == 42) {
         parse_native:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_native()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_video;
        break;
      }

      // optional .ComRequest.AdxSlot.Video video = 6;
      case 6: {
        if (tag == 50) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_price_floor;
        break;
      }

      // optional int32 price_floor = 7;
      case 7: {
        if (tag == 56) {
         parse_price_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_floor_)));
          set_has_price_floor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ComRequest.AdxSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ComRequest.AdxSlot)
  return false;
#undef DO_
}

void ComRequest_AdxSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ComRequest.AdxSlot)
  // optional string adx_slot_id = 1;
  if (has_adx_slot_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adx_slot_id().data(), this->adx_slot_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adx_slot_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->adx_slot_id(), output);
  }

  // optional int32 adx_slot_sequence_id = 2;
  if (has_adx_slot_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->adx_slot_sequence_id(), output);
  }

  // optional .ComRequest.AdxSlot.AdxSlotType adx_slot_type = 3;
  if (has_adx_slot_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->adx_slot_type(), output);
  }

  // optional .ComRequest.AdxSlot.Banner banner = 4;
  if (has_banner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->banner(), output);
  }

  // optional .ComRequest.AdxSlot.Native native = 5;
  if (has_native()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->native(), output);
  }

  // optional .ComRequest.AdxSlot.Video video = 6;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->video(), output);
  }

  // optional int32 price_floor = 7;
  if (has_price_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->price_floor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ComRequest.AdxSlot)
}

::google::protobuf::uint8* ComRequest_AdxSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ComRequest.AdxSlot)
  // optional string adx_slot_id = 1;
  if (has_adx_slot_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adx_slot_id().data(), this->adx_slot_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adx_slot_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->adx_slot_id(), target);
  }

  // optional int32 adx_slot_sequence_id = 2;
  if (has_adx_slot_sequence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->adx_slot_sequence_id(), target);
  }

  // optional .ComRequest.AdxSlot.AdxSlotType adx_slot_type = 3;
  if (has_adx_slot_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->adx_slot_type(), target);
  }

  // optional .ComRequest.AdxSlot.Banner banner = 4;
  if (has_banner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->banner(), target);
  }

  // optional .ComRequest.AdxSlot.Native native = 5;
  if (has_native()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->native(), target);
  }

  // optional .ComRequest.AdxSlot.Video video = 6;
  if (has_video()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->video(), target);
  }

  // optional int32 price_floor = 7;
  if (has_price_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->price_floor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ComRequest.AdxSlot)
  return target;
}

int ComRequest_AdxSlot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string adx_slot_id = 1;
    if (has_adx_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adx_slot_id());
    }

    // optional int32 adx_slot_sequence_id = 2;
    if (has_adx_slot_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adx_slot_sequence_id());
    }

    // optional .ComRequest.AdxSlot.AdxSlotType adx_slot_type = 3;
    if (has_adx_slot_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->adx_slot_type());
    }

    // optional .ComRequest.AdxSlot.Banner banner = 4;
    if (has_banner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->banner());
    }

    // optional .ComRequest.AdxSlot.Native native = 5;
    if (has_native()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->native());
    }

    // optional .ComRequest.AdxSlot.Video video = 6;
    if (has_video()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video());
    }

    // optional int32 price_floor = 7;
    if (has_price_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_floor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComRequest_AdxSlot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComRequest_AdxSlot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComRequest_AdxSlot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComRequest_AdxSlot::MergeFrom(const ComRequest_AdxSlot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adx_slot_id()) {
      set_adx_slot_id(from.adx_slot_id());
    }
    if (from.has_adx_slot_sequence_id()) {
      set_adx_slot_sequence_id(from.adx_slot_sequence_id());
    }
    if (from.has_adx_slot_type()) {
      set_adx_slot_type(from.adx_slot_type());
    }
    if (from.has_banner()) {
      mutable_banner()->::ComRequest_AdxSlot_Banner::MergeFrom(from.banner());
    }
    if (from.has_native()) {
      mutable_native()->::ComRequest_AdxSlot_Native::MergeFrom(from.native());
    }
    if (from.has_video()) {
      mutable_video()->::ComRequest_AdxSlot_Video::MergeFrom(from.video());
    }
    if (from.has_price_floor()) {
      set_price_floor(from.price_floor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComRequest_AdxSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComRequest_AdxSlot::CopyFrom(const ComRequest_AdxSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComRequest_AdxSlot::IsInitialized() const {

  return true;
}

void ComRequest_AdxSlot::Swap(ComRequest_AdxSlot* other) {
  if (other != this) {
    std::swap(adx_slot_id_, other->adx_slot_id_);
    std::swap(adx_slot_sequence_id_, other->adx_slot_sequence_id_);
    std::swap(adx_slot_type_, other->adx_slot_type_);
    std::swap(banner_, other->banner_);
    std::swap(native_, other->native_);
    std::swap(video_, other->video_);
    std::swap(price_floor_, other->price_floor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComRequest_AdxSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComRequest_AdxSlot_descriptor_;
  metadata.reflection = ComRequest_AdxSlot_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* ComRequest_Device_DeviceIdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComRequest_Device_DeviceIdType_descriptor_;
}
bool ComRequest_Device_DeviceIdType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ComRequest_Device_DeviceIdType ComRequest_Device::ADX_DEVICEID_UNKNOW;
const ComRequest_Device_DeviceIdType ComRequest_Device::ADX_DEVICEID_IMEI;
const ComRequest_Device_DeviceIdType ComRequest_Device::ADX_DEVICEID_IMEI_SHA1;
const ComRequest_Device_DeviceIdType ComRequest_Device::ADX_DEVICEID_IMEI_MD5;
const ComRequest_Device_DeviceIdType ComRequest_Device::ADX_DEVICEID_ANDROID_ID;
const ComRequest_Device_DeviceIdType ComRequest_Device::ADX_DEVICEID_ANDROID_ID_SHA1;
const ComRequest_Device_DeviceIdType ComRequest_Device::ADX_DEVICEID_ANDROID_ID_MD5;
const ComRequest_Device_DeviceIdType ComRequest_Device::ADX_DEVICEID_IDFA;
const ComRequest_Device_DeviceIdType ComRequest_Device::ADX_DEVICEID_IDFA_SHA1;
const ComRequest_Device_DeviceIdType ComRequest_Device::ADX_DEVICEID_IDFA_MD5;
const ComRequest_Device_DeviceIdType ComRequest_Device::ADX_DEVICEID_MAC;
const ComRequest_Device_DeviceIdType ComRequest_Device::ADX_DEVICEID_MAC_SHA1;
const ComRequest_Device_DeviceIdType ComRequest_Device::ADX_DEVICEID_MAC_MD5;
const ComRequest_Device_DeviceIdType ComRequest_Device::DeviceIdType_MIN;
const ComRequest_Device_DeviceIdType ComRequest_Device::DeviceIdType_MAX;
const int ComRequest_Device::DeviceIdType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ComRequest_Device_DeviceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComRequest_Device_DeviceType_descriptor_;
}
bool ComRequest_Device_DeviceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ComRequest_Device_DeviceType ComRequest_Device::ADX_DEVICE_UNKNOWN;
const ComRequest_Device_DeviceType ComRequest_Device::ADX_DEVICE_MOBILE;
const ComRequest_Device_DeviceType ComRequest_Device::ADX_DEVICE_PAD;
const ComRequest_Device_DeviceType ComRequest_Device::ADX_DEVICE_PC;
const ComRequest_Device_DeviceType ComRequest_Device::DeviceType_MIN;
const ComRequest_Device_DeviceType ComRequest_Device::DeviceType_MAX;
const int ComRequest_Device::DeviceType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ComRequest_Device_OS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComRequest_Device_OS_descriptor_;
}
bool ComRequest_Device_OS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ComRequest_Device_OS ComRequest_Device::ADX_OS_UNKNOWN;
const ComRequest_Device_OS ComRequest_Device::ADX_OS_IOS;
const ComRequest_Device_OS ComRequest_Device::ADX_OS_ANDROID;
const ComRequest_Device_OS ComRequest_Device::ADX_OS_WINDOWS;
const ComRequest_Device_OS ComRequest_Device::OS_MIN;
const ComRequest_Device_OS ComRequest_Device::OS_MAX;
const int ComRequest_Device::OS_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ComRequest_Device_Carrier_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComRequest_Device_Carrier_descriptor_;
}
bool ComRequest_Device_Carrier_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ComRequest_Device_Carrier ComRequest_Device::ADX_CARRIER_UNKNOWN;
const ComRequest_Device_Carrier ComRequest_Device::ADX_CARRIER_CHINA_MOBILE;
const ComRequest_Device_Carrier ComRequest_Device::ADX_CARRIER_CHINA_UNICOM;
const ComRequest_Device_Carrier ComRequest_Device::ADX_CARRIER_CHINA_TELECOM;
const ComRequest_Device_Carrier ComRequest_Device::Carrier_MIN;
const ComRequest_Device_Carrier ComRequest_Device::Carrier_MAX;
const int ComRequest_Device::Carrier_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ComRequest_Device_Connection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComRequest_Device_Connection_descriptor_;
}
bool ComRequest_Device_Connection_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ComRequest_Device_Connection ComRequest_Device::ADX_CONNECTION_UNKNOWN;
const ComRequest_Device_Connection ComRequest_Device::ADX_CONNECTION_WIFI;
const ComRequest_Device_Connection ComRequest_Device::ADX_CONNECTION_2G;
const ComRequest_Device_Connection ComRequest_Device::ADX_CONNECTION_3G;
const ComRequest_Device_Connection ComRequest_Device::ADX_CONNECTION_4G;
const ComRequest_Device_Connection ComRequest_Device::ADX_CONNECTION_5G;
const ComRequest_Device_Connection ComRequest_Device::Connection_MIN;
const ComRequest_Device_Connection ComRequest_Device::Connection_MAX;
const int ComRequest_Device::Connection_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ComRequest_Device_DeviceID::kIdFieldNumber;
const int ComRequest_Device_DeviceID::kTypeFieldNumber;
#endif  // !_MSC_VER

ComRequest_Device_DeviceID::ComRequest_Device_DeviceID()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ComRequest.Device.DeviceID)
}

void ComRequest_Device_DeviceID::InitAsDefaultInstance() {
}

ComRequest_Device_DeviceID::ComRequest_Device_DeviceID(const ComRequest_Device_DeviceID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ComRequest.Device.DeviceID)
}

void ComRequest_Device_DeviceID::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComRequest_Device_DeviceID::~ComRequest_Device_DeviceID() {
  // @@protoc_insertion_point(destructor:ComRequest.Device.DeviceID)
  SharedDtor();
}

void ComRequest_Device_DeviceID::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void ComRequest_Device_DeviceID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComRequest_Device_DeviceID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComRequest_Device_DeviceID_descriptor_;
}

const ComRequest_Device_DeviceID& ComRequest_Device_DeviceID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adx_5fcom_2eproto();
  return *default_instance_;
}

ComRequest_Device_DeviceID* ComRequest_Device_DeviceID::default_instance_ = NULL;

ComRequest_Device_DeviceID* ComRequest_Device_DeviceID::New() const {
  return new ComRequest_Device_DeviceID;
}

void ComRequest_Device_DeviceID::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComRequest_Device_DeviceID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ComRequest.Device.DeviceID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .ComRequest.Device.DeviceIdType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ComRequest_Device_DeviceIdType_IsValid(value)) {
            set_type(static_cast< ::ComRequest_Device_DeviceIdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ComRequest.Device.DeviceID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ComRequest.Device.DeviceID)
  return false;
#undef DO_
}

void ComRequest_Device_DeviceID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ComRequest.Device.DeviceID)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .ComRequest.Device.DeviceIdType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ComRequest.Device.DeviceID)
}

::google::protobuf::uint8* ComRequest_Device_DeviceID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ComRequest.Device.DeviceID)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .ComRequest.Device.DeviceIdType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ComRequest.Device.DeviceID)
  return target;
}

int ComRequest_Device_DeviceID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .ComRequest.Device.DeviceIdType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComRequest_Device_DeviceID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComRequest_Device_DeviceID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComRequest_Device_DeviceID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComRequest_Device_DeviceID::MergeFrom(const ComRequest_Device_DeviceID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComRequest_Device_DeviceID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComRequest_Device_DeviceID::CopyFrom(const ComRequest_Device_DeviceID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComRequest_Device_DeviceID::IsInitialized() const {

  return true;
}

void ComRequest_Device_DeviceID::Swap(ComRequest_Device_DeviceID* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComRequest_Device_DeviceID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComRequest_Device_DeviceID_descriptor_;
  metadata.reflection = ComRequest_Device_DeviceID_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ComRequest_Device::kDeviceIdFieldNumber;
const int ComRequest_Device::kDeviceTypeFieldNumber;
const int ComRequest_Device::kOsFieldNumber;
const int ComRequest_Device::kOsVersionFieldNumber;
const int ComRequest_Device::kCarrierFieldNumber;
const int ComRequest_Device::kConnectionFieldNumber;
const int ComRequest_Device::kBrandFieldNumber;
const int ComRequest_Device::kModelFieldNumber;
const int ComRequest_Device::kUserAgentFieldNumber;
const int ComRequest_Device::kIpFieldNumber;
#endif  // !_MSC_VER

ComRequest_Device::ComRequest_Device()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ComRequest.Device)
}

void ComRequest_Device::InitAsDefaultInstance() {
}

ComRequest_Device::ComRequest_Device(const ComRequest_Device& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ComRequest.Device)
}

void ComRequest_Device::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  device_type_ = 0;
  os_ = 0;
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  carrier_ = 0;
  connection_ = 0;
  brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComRequest_Device::~ComRequest_Device() {
  // @@protoc_insertion_point(destructor:ComRequest.Device)
  SharedDtor();
}

void ComRequest_Device::SharedDtor() {
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_version_;
  }
  if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete brand_;
  }
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (user_agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_agent_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void ComRequest_Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComRequest_Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComRequest_Device_descriptor_;
}

const ComRequest_Device& ComRequest_Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adx_5fcom_2eproto();
  return *default_instance_;
}

ComRequest_Device* ComRequest_Device::default_instance_ = NULL;

ComRequest_Device* ComRequest_Device::New() const {
  return new ComRequest_Device;
}

void ComRequest_Device::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ComRequest_Device*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 254) {
    ZR_(device_type_, os_);
    ZR_(carrier_, connection_);
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_version_->clear();
      }
    }
    if (has_brand()) {
      if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        brand_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_user_agent()) {
      if (user_agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_agent_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  device_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComRequest_Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ComRequest.Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ComRequest.Device.DeviceID device_id = 1;
      case 1: {
        if (tag == 10) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_device_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_device_id;
        if (input->ExpectTag(16)) goto parse_device_type;
        break;
      }

      // optional .ComRequest.Device.DeviceType device_type = 2;
      case 2: {
        if (tag == 16) {
         parse_device_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ComRequest_Device_DeviceType_IsValid(value)) {
            set_device_type(static_cast< ::ComRequest_Device_DeviceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_os;
        break;
      }

      // optional .ComRequest.Device.OS os = 3;
      case 3: {
        if (tag == 24) {
         parse_os:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ComRequest_Device_OS_IsValid(value)) {
            set_os(static_cast< ::ComRequest_Device_OS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_os_version;
        break;
      }

      // optional string os_version = 4;
      case 4: {
        if (tag == 34) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os_version().data(), this->os_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "os_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_carrier;
        break;
      }

      // optional .ComRequest.Device.Carrier carrier = 5;
      case 5: {
        if (tag == 40) {
         parse_carrier:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ComRequest_Device_Carrier_IsValid(value)) {
            set_carrier(static_cast< ::ComRequest_Device_Carrier >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_connection;
        break;
      }

      // optional .ComRequest.Device.Connection connection = 6;
      case 6: {
        if (tag == 48) {
         parse_connection:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ComRequest_Device_Connection_IsValid(value)) {
            set_connection(static_cast< ::ComRequest_Device_Connection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_brand;
        break;
      }

      // optional string brand = 7;
      case 7: {
        if (tag == 58) {
         parse_brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brand().data(), this->brand().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brand");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_model;
        break;
      }

      // optional string model = 8;
      case 8: {
        if (tag == 66) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_user_agent;
        break;
      }

      // optional string user_agent = 9;
      case 9: {
        if (tag == 74) {
         parse_user_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_agent().data(), this->user_agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_agent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ip;
        break;
      }

      // optional string ip = 10;
      case 10: {
        if (tag == 82) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ComRequest.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ComRequest.Device)
  return false;
#undef DO_
}

void ComRequest_Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ComRequest.Device)
  // repeated .ComRequest.Device.DeviceID device_id = 1;
  for (int i = 0; i < this->device_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->device_id(i), output);
  }

  // optional .ComRequest.Device.DeviceType device_type = 2;
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->device_type(), output);
  }

  // optional .ComRequest.Device.OS os = 3;
  if (has_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->os(), output);
  }

  // optional string os_version = 4;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "os_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->os_version(), output);
  }

  // optional .ComRequest.Device.Carrier carrier = 5;
  if (has_carrier()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->carrier(), output);
  }

  // optional .ComRequest.Device.Connection connection = 6;
  if (has_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->connection(), output);
  }

  // optional string brand = 7;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brand");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->brand(), output);
  }

  // optional string model = 8;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->model(), output);
  }

  // optional string user_agent = 9;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_agent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->user_agent(), output);
  }

  // optional string ip = 10;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ComRequest.Device)
}

::google::protobuf::uint8* ComRequest_Device::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ComRequest.Device)
  // repeated .ComRequest.Device.DeviceID device_id = 1;
  for (int i = 0; i < this->device_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->device_id(i), target);
  }

  // optional .ComRequest.Device.DeviceType device_type = 2;
  if (has_device_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->device_type(), target);
  }

  // optional .ComRequest.Device.OS os = 3;
  if (has_os()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->os(), target);
  }

  // optional string os_version = 4;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "os_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->os_version(), target);
  }

  // optional .ComRequest.Device.Carrier carrier = 5;
  if (has_carrier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->carrier(), target);
  }

  // optional .ComRequest.Device.Connection connection = 6;
  if (has_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->connection(), target);
  }

  // optional string brand = 7;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brand");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->brand(), target);
  }

  // optional string model = 8;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->model(), target);
  }

  // optional string user_agent = 9;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_agent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->user_agent(), target);
  }

  // optional string ip = 10;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ComRequest.Device)
  return target;
}

int ComRequest_Device::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .ComRequest.Device.DeviceType device_type = 2;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
    }

    // optional .ComRequest.Device.OS os = 3;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->os());
    }

    // optional string os_version = 4;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_version());
    }

    // optional .ComRequest.Device.Carrier carrier = 5;
    if (has_carrier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->carrier());
    }

    // optional .ComRequest.Device.Connection connection = 6;
    if (has_connection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connection());
    }

    // optional string brand = 7;
    if (has_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brand());
    }

    // optional string model = 8;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string user_agent = 9;
    if (has_user_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_agent());
    }

    // optional string ip = 10;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  // repeated .ComRequest.Device.DeviceID device_id = 1;
  total_size += 1 * this->device_id_size();
  for (int i = 0; i < this->device_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->device_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComRequest_Device::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComRequest_Device* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComRequest_Device*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComRequest_Device::MergeFrom(const ComRequest_Device& from) {
  GOOGLE_CHECK_NE(&from, this);
  device_id_.MergeFrom(from.device_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_carrier()) {
      set_carrier(from.carrier());
    }
    if (from.has_connection()) {
      set_connection(from.connection());
    }
    if (from.has_brand()) {
      set_brand(from.brand());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_user_agent()) {
      set_user_agent(from.user_agent());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComRequest_Device::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComRequest_Device::CopyFrom(const ComRequest_Device& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComRequest_Device::IsInitialized() const {

  return true;
}

void ComRequest_Device::Swap(ComRequest_Device* other) {
  if (other != this) {
    device_id_.Swap(&other->device_id_);
    std::swap(device_type_, other->device_type_);
    std::swap(os_, other->os_);
    std::swap(os_version_, other->os_version_);
    std::swap(carrier_, other->carrier_);
    std::swap(connection_, other->connection_);
    std::swap(brand_, other->brand_);
    std::swap(model_, other->model_);
    std::swap(user_agent_, other->user_agent_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComRequest_Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComRequest_Device_descriptor_;
  metadata.reflection = ComRequest_Device_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ComRequest_App::kAppIdFieldNumber;
const int ComRequest_App::kAppCategoryFieldNumber;
#endif  // !_MSC_VER

ComRequest_App::ComRequest_App()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ComRequest.App)
}

void ComRequest_App::InitAsDefaultInstance() {
}

ComRequest_App::ComRequest_App(const ComRequest_App& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ComRequest.App)
}

void ComRequest_App::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_category_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComRequest_App::~ComRequest_App() {
  // @@protoc_insertion_point(destructor:ComRequest.App)
  SharedDtor();
}

void ComRequest_App::SharedDtor() {
  if (app_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_id_;
  }
  if (this != default_instance_) {
  }
}

void ComRequest_App::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComRequest_App::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComRequest_App_descriptor_;
}

const ComRequest_App& ComRequest_App::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adx_5fcom_2eproto();
  return *default_instance_;
}

ComRequest_App* ComRequest_App::default_instance_ = NULL;

ComRequest_App* ComRequest_App::New() const {
  return new ComRequest_App;
}

void ComRequest_App::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_app_id()) {
      if (app_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        app_id_->clear();
      }
    }
    app_category_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComRequest_App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ComRequest.App)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string app_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_id().data(), this->app_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "app_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_app_category;
        break;
      }

      // optional int32 app_category = 2;
      case 2: {
        if (tag == 16) {
         parse_app_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_category_)));
          set_has_app_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ComRequest.App)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ComRequest.App)
  return false;
#undef DO_
}

void ComRequest_App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ComRequest.App)
  // optional string app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->app_id(), output);
  }

  // optional int32 app_category = 2;
  if (has_app_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->app_category(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ComRequest.App)
}

::google::protobuf::uint8* ComRequest_App::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ComRequest.App)
  // optional string app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->app_id(), target);
  }

  // optional int32 app_category = 2;
  if (has_app_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->app_category(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ComRequest.App)
  return target;
}

int ComRequest_App::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_id());
    }

    // optional int32 app_category = 2;
    if (has_app_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->app_category());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComRequest_App::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComRequest_App* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComRequest_App*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComRequest_App::MergeFrom(const ComRequest_App& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_app_category()) {
      set_app_category(from.app_category());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComRequest_App::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComRequest_App::CopyFrom(const ComRequest_App& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComRequest_App::IsInitialized() const {

  return true;
}

void ComRequest_App::Swap(ComRequest_App* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(app_category_, other->app_category_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComRequest_App::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComRequest_App_descriptor_;
  metadata.reflection = ComRequest_App_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ComRequest::kAdxFieldNumber;
const int ComRequest::kBidFieldNumber;
const int ComRequest::kAdxSlotFieldNumber;
const int ComRequest::kDeviceFieldNumber;
const int ComRequest::kAppFieldNumber;
#endif  // !_MSC_VER

ComRequest::ComRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ComRequest)
}

void ComRequest::InitAsDefaultInstance() {
  device_ = const_cast< ::ComRequest_Device*>(&::ComRequest_Device::default_instance());
  app_ = const_cast< ::ComRequest_App*>(&::ComRequest_App::default_instance());
}

ComRequest::ComRequest(const ComRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ComRequest)
}

void ComRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  adx_ = 0;
  bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_ = NULL;
  app_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComRequest::~ComRequest() {
  // @@protoc_insertion_point(destructor:ComRequest)
  SharedDtor();
}

void ComRequest::SharedDtor() {
  if (bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_;
  }
  if (this != default_instance_) {
    delete device_;
    delete app_;
  }
}

void ComRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComRequest_descriptor_;
}

const ComRequest& ComRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adx_5fcom_2eproto();
  return *default_instance_;
}

ComRequest* ComRequest::default_instance_ = NULL;

ComRequest* ComRequest::New() const {
  return new ComRequest;
}

void ComRequest::Clear() {
  if (_has_bits_[0 / 32] & 27) {
    adx_ = 0;
    if (has_bid()) {
      if (bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bid_->clear();
      }
    }
    if (has_device()) {
      if (device_ != NULL) device_->::ComRequest_Device::Clear();
    }
    if (has_app()) {
      if (app_ != NULL) app_->::ComRequest_App::Clear();
    }
  }
  adx_slot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ComRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 adx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adx_)));
          set_has_adx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bid;
        break;
      }

      // optional string bid = 2;
      case 2: {
        if (tag == 18) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bid().data(), this->bid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_adx_slot;
        break;
      }

      // repeated .ComRequest.AdxSlot adx_slot = 3;
      case 3: {
        if (tag == 26) {
         parse_adx_slot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_adx_slot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_adx_slot;
        if (input->ExpectTag(34)) goto parse_device;
        break;
      }

      // optional .ComRequest.Device device = 4;
      case 4: {
        if (tag == 34) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_app;
        break;
      }

      // optional .ComRequest.App app = 5;
      case 5: {
        if (tag == 42) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ComRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ComRequest)
  return false;
#undef DO_
}

void ComRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ComRequest)
  // optional int32 adx = 1;
  if (has_adx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->adx(), output);
  }

  // optional string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bid(), output);
  }

  // repeated .ComRequest.AdxSlot adx_slot = 3;
  for (int i = 0; i < this->adx_slot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->adx_slot(i), output);
  }

  // optional .ComRequest.Device device = 4;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->device(), output);
  }

  // optional .ComRequest.App app = 5;
  if (has_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->app(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ComRequest)
}

::google::protobuf::uint8* ComRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ComRequest)
  // optional int32 adx = 1;
  if (has_adx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->adx(), target);
  }

  // optional string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bid(), target);
  }

  // repeated .ComRequest.AdxSlot adx_slot = 3;
  for (int i = 0; i < this->adx_slot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->adx_slot(i), target);
  }

  // optional .ComRequest.Device device = 4;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->device(), target);
  }

  // optional .ComRequest.App app = 5;
  if (has_app()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->app(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ComRequest)
  return target;
}

int ComRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 adx = 1;
    if (has_adx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adx());
    }

    // optional string bid = 2;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bid());
    }

    // optional .ComRequest.Device device = 4;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device());
    }

    // optional .ComRequest.App app = 5;
    if (has_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app());
    }

  }
  // repeated .ComRequest.AdxSlot adx_slot = 3;
  total_size += 1 * this->adx_slot_size();
  for (int i = 0; i < this->adx_slot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adx_slot(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComRequest::MergeFrom(const ComRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  adx_slot_.MergeFrom(from.adx_slot_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adx()) {
      set_adx(from.adx());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_device()) {
      mutable_device()->::ComRequest_Device::MergeFrom(from.device());
    }
    if (from.has_app()) {
      mutable_app()->::ComRequest_App::MergeFrom(from.app());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComRequest::CopyFrom(const ComRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComRequest::IsInitialized() const {

  return true;
}

void ComRequest::Swap(ComRequest* other) {
  if (other != this) {
    std::swap(adx_, other->adx_);
    std::swap(bid_, other->bid_);
    adx_slot_.Swap(&other->adx_slot_);
    std::swap(device_, other->device_);
    std::swap(app_, other->app_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComRequest_descriptor_;
  metadata.reflection = ComRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ComResponse_AdxSlot_AdxSlotType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComResponse_AdxSlot_AdxSlotType_descriptor_;
}
bool ComResponse_AdxSlot_AdxSlotType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ComResponse_AdxSlot_AdxSlotType ComResponse_AdxSlot::ADX_SLOT_UNKNOWN;
const ComResponse_AdxSlot_AdxSlotType ComResponse_AdxSlot::ADX_SLOT_BANNER;
const ComResponse_AdxSlot_AdxSlotType ComResponse_AdxSlot::ADX_SLOT_NATIVE;
const ComResponse_AdxSlot_AdxSlotType ComResponse_AdxSlot::ADX_SLOT_VIDEO;
const ComResponse_AdxSlot_AdxSlotType ComResponse_AdxSlot::AdxSlotType_MIN;
const ComResponse_AdxSlot_AdxSlotType ComResponse_AdxSlot::AdxSlotType_MAX;
const int ComResponse_AdxSlot::AdxSlotType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ComResponse_AdxSlot::kAdxSlotIdFieldNumber;
const int ComResponse_AdxSlot::kAdxSlotSequenceIdFieldNumber;
const int ComResponse_AdxSlot::kAdxSlotTypeFieldNumber;
const int ComResponse_AdxSlot::kPriceFieldNumber;
const int ComResponse_AdxSlot::kTemplateFieldNumber;
const int ComResponse_AdxSlot::kExtFieldNumber;
#endif  // !_MSC_VER

ComResponse_AdxSlot::ComResponse_AdxSlot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ComResponse.AdxSlot)
}

void ComResponse_AdxSlot::InitAsDefaultInstance() {
}

ComResponse_AdxSlot::ComResponse_AdxSlot(const ComResponse_AdxSlot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ComResponse.AdxSlot)
}

void ComResponse_AdxSlot::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  adx_slot_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adx_slot_sequence_id_ = 0;
  adx_slot_type_ = 0;
  price_ = 0;
  template__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComResponse_AdxSlot::~ComResponse_AdxSlot() {
  // @@protoc_insertion_point(destructor:ComResponse.AdxSlot)
  SharedDtor();
}

void ComResponse_AdxSlot::SharedDtor() {
  if (adx_slot_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adx_slot_id_;
  }
  if (template__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete template__;
  }
  if (ext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ext_;
  }
  if (this != default_instance_) {
  }
}

void ComResponse_AdxSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComResponse_AdxSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComResponse_AdxSlot_descriptor_;
}

const ComResponse_AdxSlot& ComResponse_AdxSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adx_5fcom_2eproto();
  return *default_instance_;
}

ComResponse_AdxSlot* ComResponse_AdxSlot::default_instance_ = NULL;

ComResponse_AdxSlot* ComResponse_AdxSlot::New() const {
  return new ComResponse_AdxSlot;
}

void ComResponse_AdxSlot::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ComResponse_AdxSlot*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(adx_slot_sequence_id_, adx_slot_type_);
    if (has_adx_slot_id()) {
      if (adx_slot_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        adx_slot_id_->clear();
      }
    }
    price_ = 0;
    if (has_template_()) {
      if (template__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        template__->clear();
      }
    }
    if (has_ext()) {
      if (ext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ext_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComResponse_AdxSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ComResponse.AdxSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string adx_slot_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adx_slot_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adx_slot_id().data(), this->adx_slot_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "adx_slot_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_adx_slot_sequence_id;
        break;
      }

      // optional int32 adx_slot_sequence_id = 2;
      case 2: {
        if (tag == 16) {
         parse_adx_slot_sequence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adx_slot_sequence_id_)));
          set_has_adx_slot_sequence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_adx_slot_type;
        break;
      }

      // optional .ComResponse.AdxSlot.AdxSlotType adx_slot_type = 3;
      case 3: {
        if (tag == 24) {
         parse_adx_slot_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ComResponse_AdxSlot_AdxSlotType_IsValid(value)) {
            set_adx_slot_type(static_cast< ::ComResponse_AdxSlot_AdxSlotType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }

      // optional int32 price = 4;
      case 4: {
        if (tag == 32) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_template;
        break;
      }

      // optional string template = 5;
      case 5: {
        if (tag == 42) {
         parse_template:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_template_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->template_().data(), this->template_().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "template_");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ext;
        break;
      }

      // optional string ext = 6;
      case 6: {
        if (tag == 50) {
         parse_ext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ext().data(), this->ext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ComResponse.AdxSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ComResponse.AdxSlot)
  return false;
#undef DO_
}

void ComResponse_AdxSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ComResponse.AdxSlot)
  // optional string adx_slot_id = 1;
  if (has_adx_slot_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adx_slot_id().data(), this->adx_slot_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adx_slot_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->adx_slot_id(), output);
  }

  // optional int32 adx_slot_sequence_id = 2;
  if (has_adx_slot_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->adx_slot_sequence_id(), output);
  }

  // optional .ComResponse.AdxSlot.AdxSlotType adx_slot_type = 3;
  if (has_adx_slot_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->adx_slot_type(), output);
  }

  // optional int32 price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->price(), output);
  }

  // optional string template = 5;
  if (has_template_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->template_().data(), this->template_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "template_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->template_(), output);
  }

  // optional string ext = 6;
  if (has_ext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ext().data(), this->ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ComResponse.AdxSlot)
}

::google::protobuf::uint8* ComResponse_AdxSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ComResponse.AdxSlot)
  // optional string adx_slot_id = 1;
  if (has_adx_slot_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adx_slot_id().data(), this->adx_slot_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "adx_slot_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->adx_slot_id(), target);
  }

  // optional int32 adx_slot_sequence_id = 2;
  if (has_adx_slot_sequence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->adx_slot_sequence_id(), target);
  }

  // optional .ComResponse.AdxSlot.AdxSlotType adx_slot_type = 3;
  if (has_adx_slot_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->adx_slot_type(), target);
  }

  // optional int32 price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->price(), target);
  }

  // optional string template = 5;
  if (has_template_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->template_().data(), this->template_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "template_");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->template_(), target);
  }

  // optional string ext = 6;
  if (has_ext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ext().data(), this->ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ComResponse.AdxSlot)
  return target;
}

int ComResponse_AdxSlot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string adx_slot_id = 1;
    if (has_adx_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adx_slot_id());
    }

    // optional int32 adx_slot_sequence_id = 2;
    if (has_adx_slot_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adx_slot_sequence_id());
    }

    // optional .ComResponse.AdxSlot.AdxSlotType adx_slot_type = 3;
    if (has_adx_slot_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->adx_slot_type());
    }

    // optional int32 price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional string template = 5;
    if (has_template_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->template_());
    }

    // optional string ext = 6;
    if (has_ext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComResponse_AdxSlot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComResponse_AdxSlot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComResponse_AdxSlot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComResponse_AdxSlot::MergeFrom(const ComResponse_AdxSlot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adx_slot_id()) {
      set_adx_slot_id(from.adx_slot_id());
    }
    if (from.has_adx_slot_sequence_id()) {
      set_adx_slot_sequence_id(from.adx_slot_sequence_id());
    }
    if (from.has_adx_slot_type()) {
      set_adx_slot_type(from.adx_slot_type());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_template_()) {
      set_template_(from.template_());
    }
    if (from.has_ext()) {
      set_ext(from.ext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComResponse_AdxSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComResponse_AdxSlot::CopyFrom(const ComResponse_AdxSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComResponse_AdxSlot::IsInitialized() const {

  return true;
}

void ComResponse_AdxSlot::Swap(ComResponse_AdxSlot* other) {
  if (other != this) {
    std::swap(adx_slot_id_, other->adx_slot_id_);
    std::swap(adx_slot_sequence_id_, other->adx_slot_sequence_id_);
    std::swap(adx_slot_type_, other->adx_slot_type_);
    std::swap(price_, other->price_);
    std::swap(template__, other->template__);
    std::swap(ext_, other->ext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComResponse_AdxSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComResponse_AdxSlot_descriptor_;
  metadata.reflection = ComResponse_AdxSlot_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ComResponse::kBidFieldNumber;
const int ComResponse::kAdxSlotFieldNumber;
#endif  // !_MSC_VER

ComResponse::ComResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ComResponse)
}

void ComResponse::InitAsDefaultInstance() {
}

ComResponse::ComResponse(const ComResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ComResponse)
}

void ComResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComResponse::~ComResponse() {
  // @@protoc_insertion_point(destructor:ComResponse)
  SharedDtor();
}

void ComResponse::SharedDtor() {
  if (bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_;
  }
  if (this != default_instance_) {
  }
}

void ComResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComResponse_descriptor_;
}

const ComResponse& ComResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adx_5fcom_2eproto();
  return *default_instance_;
}

ComResponse* ComResponse::default_instance_ = NULL;

ComResponse* ComResponse::New() const {
  return new ComResponse;
}

void ComResponse::Clear() {
  if (has_bid()) {
    if (bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      bid_->clear();
    }
  }
  adx_slot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ComResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bid().data(), this->bid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_adx_slot;
        break;
      }

      // repeated .ComResponse.AdxSlot adx_slot = 2;
      case 2: {
        if (tag == 18) {
         parse_adx_slot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_adx_slot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_adx_slot;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ComResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ComResponse)
  return false;
#undef DO_
}

void ComResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ComResponse)
  // optional string bid = 1;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bid(), output);
  }

  // repeated .ComResponse.AdxSlot adx_slot = 2;
  for (int i = 0; i < this->adx_slot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->adx_slot(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ComResponse)
}

::google::protobuf::uint8* ComResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ComResponse)
  // optional string bid = 1;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bid(), target);
  }

  // repeated .ComResponse.AdxSlot adx_slot = 2;
  for (int i = 0; i < this->adx_slot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->adx_slot(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ComResponse)
  return target;
}

int ComResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string bid = 1;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bid());
    }

  }
  // repeated .ComResponse.AdxSlot adx_slot = 2;
  total_size += 1 * this->adx_slot_size();
  for (int i = 0; i < this->adx_slot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adx_slot(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComResponse::MergeFrom(const ComResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  adx_slot_.MergeFrom(from.adx_slot_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid()) {
      set_bid(from.bid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComResponse::CopyFrom(const ComResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComResponse::IsInitialized() const {

  return true;
}

void ComResponse::Swap(ComResponse* other) {
  if (other != this) {
    std::swap(bid_, other->bid_);
    adx_slot_.Swap(&other->adx_slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComResponse_descriptor_;
  metadata.reflection = ComResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
