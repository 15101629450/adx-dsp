// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: adx_com.proto

#ifndef PROTOBUF_adx_5fcom_2eproto__INCLUDED
#define PROTOBUF_adx_5fcom_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_adx_5fcom_2eproto();
void protobuf_AssignDesc_adx_5fcom_2eproto();
void protobuf_ShutdownFile_adx_5fcom_2eproto();

class ComRequest;
class ComRequest_AdxSlot;
class ComRequest_AdxSlot_Banner;
class ComRequest_AdxSlot_Native;
class ComRequest_AdxSlot_Video;
class ComRequest_Device;
class ComRequest_Device_DeviceID;
class ComRequest_App;
class ComResponse;
class ComResponse_AdxSlot;

enum ComRequest_AdxSlot_AdxSlotType {
  ComRequest_AdxSlot_AdxSlotType_ADX_SLOT_UNKNOWN = 0,
  ComRequest_AdxSlot_AdxSlotType_ADX_SLOT_BANNER = 1,
  ComRequest_AdxSlot_AdxSlotType_ADX_SLOT_NATIVE = 2,
  ComRequest_AdxSlot_AdxSlotType_ADX_SLOT_VIDEO = 3
};
bool ComRequest_AdxSlot_AdxSlotType_IsValid(int value);
const ComRequest_AdxSlot_AdxSlotType ComRequest_AdxSlot_AdxSlotType_AdxSlotType_MIN = ComRequest_AdxSlot_AdxSlotType_ADX_SLOT_UNKNOWN;
const ComRequest_AdxSlot_AdxSlotType ComRequest_AdxSlot_AdxSlotType_AdxSlotType_MAX = ComRequest_AdxSlot_AdxSlotType_ADX_SLOT_VIDEO;
const int ComRequest_AdxSlot_AdxSlotType_AdxSlotType_ARRAYSIZE = ComRequest_AdxSlot_AdxSlotType_AdxSlotType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ComRequest_AdxSlot_AdxSlotType_descriptor();
inline const ::std::string& ComRequest_AdxSlot_AdxSlotType_Name(ComRequest_AdxSlot_AdxSlotType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ComRequest_AdxSlot_AdxSlotType_descriptor(), value);
}
inline bool ComRequest_AdxSlot_AdxSlotType_Parse(
    const ::std::string& name, ComRequest_AdxSlot_AdxSlotType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ComRequest_AdxSlot_AdxSlotType>(
    ComRequest_AdxSlot_AdxSlotType_descriptor(), name, value);
}
enum ComRequest_Device_DeviceIdType {
  ComRequest_Device_DeviceIdType_ADX_DEVICEID_UNKNOW = 0,
  ComRequest_Device_DeviceIdType_ADX_DEVICEID_IMEI = 1,
  ComRequest_Device_DeviceIdType_ADX_DEVICEID_IMEI_SHA1 = 2,
  ComRequest_Device_DeviceIdType_ADX_DEVICEID_IMEI_MD5 = 3,
  ComRequest_Device_DeviceIdType_ADX_DEVICEID_ANDROID_ID = 4,
  ComRequest_Device_DeviceIdType_ADX_DEVICEID_ANDROID_ID_SHA1 = 5,
  ComRequest_Device_DeviceIdType_ADX_DEVICEID_ANDROID_ID_MD5 = 6,
  ComRequest_Device_DeviceIdType_ADX_DEVICEID_IDFA = 7,
  ComRequest_Device_DeviceIdType_ADX_DEVICEID_IDFA_SHA1 = 8,
  ComRequest_Device_DeviceIdType_ADX_DEVICEID_IDFA_MD5 = 9,
  ComRequest_Device_DeviceIdType_ADX_DEVICEID_MAC = 10,
  ComRequest_Device_DeviceIdType_ADX_DEVICEID_MAC_SHA1 = 11,
  ComRequest_Device_DeviceIdType_ADX_DEVICEID_MAC_MD5 = 12
};
bool ComRequest_Device_DeviceIdType_IsValid(int value);
const ComRequest_Device_DeviceIdType ComRequest_Device_DeviceIdType_DeviceIdType_MIN = ComRequest_Device_DeviceIdType_ADX_DEVICEID_UNKNOW;
const ComRequest_Device_DeviceIdType ComRequest_Device_DeviceIdType_DeviceIdType_MAX = ComRequest_Device_DeviceIdType_ADX_DEVICEID_MAC_MD5;
const int ComRequest_Device_DeviceIdType_DeviceIdType_ARRAYSIZE = ComRequest_Device_DeviceIdType_DeviceIdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ComRequest_Device_DeviceIdType_descriptor();
inline const ::std::string& ComRequest_Device_DeviceIdType_Name(ComRequest_Device_DeviceIdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ComRequest_Device_DeviceIdType_descriptor(), value);
}
inline bool ComRequest_Device_DeviceIdType_Parse(
    const ::std::string& name, ComRequest_Device_DeviceIdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ComRequest_Device_DeviceIdType>(
    ComRequest_Device_DeviceIdType_descriptor(), name, value);
}
enum ComRequest_Device_DeviceType {
  ComRequest_Device_DeviceType_ADX_DEVICE_UNKNOWN = 0,
  ComRequest_Device_DeviceType_ADX_DEVICE_MOBILE = 1,
  ComRequest_Device_DeviceType_ADX_DEVICE_PAD = 2,
  ComRequest_Device_DeviceType_ADX_DEVICE_PC = 3
};
bool ComRequest_Device_DeviceType_IsValid(int value);
const ComRequest_Device_DeviceType ComRequest_Device_DeviceType_DeviceType_MIN = ComRequest_Device_DeviceType_ADX_DEVICE_UNKNOWN;
const ComRequest_Device_DeviceType ComRequest_Device_DeviceType_DeviceType_MAX = ComRequest_Device_DeviceType_ADX_DEVICE_PC;
const int ComRequest_Device_DeviceType_DeviceType_ARRAYSIZE = ComRequest_Device_DeviceType_DeviceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ComRequest_Device_DeviceType_descriptor();
inline const ::std::string& ComRequest_Device_DeviceType_Name(ComRequest_Device_DeviceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ComRequest_Device_DeviceType_descriptor(), value);
}
inline bool ComRequest_Device_DeviceType_Parse(
    const ::std::string& name, ComRequest_Device_DeviceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ComRequest_Device_DeviceType>(
    ComRequest_Device_DeviceType_descriptor(), name, value);
}
enum ComRequest_Device_OS {
  ComRequest_Device_OS_ADX_OS_UNKNOWN = 0,
  ComRequest_Device_OS_ADX_OS_IOS = 1,
  ComRequest_Device_OS_ADX_OS_ANDROID = 2,
  ComRequest_Device_OS_ADX_OS_WINDOWS = 3
};
bool ComRequest_Device_OS_IsValid(int value);
const ComRequest_Device_OS ComRequest_Device_OS_OS_MIN = ComRequest_Device_OS_ADX_OS_UNKNOWN;
const ComRequest_Device_OS ComRequest_Device_OS_OS_MAX = ComRequest_Device_OS_ADX_OS_WINDOWS;
const int ComRequest_Device_OS_OS_ARRAYSIZE = ComRequest_Device_OS_OS_MAX + 1;

const ::google::protobuf::EnumDescriptor* ComRequest_Device_OS_descriptor();
inline const ::std::string& ComRequest_Device_OS_Name(ComRequest_Device_OS value) {
  return ::google::protobuf::internal::NameOfEnum(
    ComRequest_Device_OS_descriptor(), value);
}
inline bool ComRequest_Device_OS_Parse(
    const ::std::string& name, ComRequest_Device_OS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ComRequest_Device_OS>(
    ComRequest_Device_OS_descriptor(), name, value);
}
enum ComRequest_Device_Carrier {
  ComRequest_Device_Carrier_ADX_CARRIER_UNKNOWN = 0,
  ComRequest_Device_Carrier_ADX_CARRIER_CHINA_MOBILE = 1,
  ComRequest_Device_Carrier_ADX_CARRIER_CHINA_UNICOM = 2,
  ComRequest_Device_Carrier_ADX_CARRIER_CHINA_TELECOM = 3
};
bool ComRequest_Device_Carrier_IsValid(int value);
const ComRequest_Device_Carrier ComRequest_Device_Carrier_Carrier_MIN = ComRequest_Device_Carrier_ADX_CARRIER_UNKNOWN;
const ComRequest_Device_Carrier ComRequest_Device_Carrier_Carrier_MAX = ComRequest_Device_Carrier_ADX_CARRIER_CHINA_TELECOM;
const int ComRequest_Device_Carrier_Carrier_ARRAYSIZE = ComRequest_Device_Carrier_Carrier_MAX + 1;

const ::google::protobuf::EnumDescriptor* ComRequest_Device_Carrier_descriptor();
inline const ::std::string& ComRequest_Device_Carrier_Name(ComRequest_Device_Carrier value) {
  return ::google::protobuf::internal::NameOfEnum(
    ComRequest_Device_Carrier_descriptor(), value);
}
inline bool ComRequest_Device_Carrier_Parse(
    const ::std::string& name, ComRequest_Device_Carrier* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ComRequest_Device_Carrier>(
    ComRequest_Device_Carrier_descriptor(), name, value);
}
enum ComRequest_Device_Connection {
  ComRequest_Device_Connection_ADX_CONNECTION_UNKNOWN = 0,
  ComRequest_Device_Connection_ADX_CONNECTION_WIFI = 1,
  ComRequest_Device_Connection_ADX_CONNECTION_2G = 2,
  ComRequest_Device_Connection_ADX_CONNECTION_3G = 3,
  ComRequest_Device_Connection_ADX_CONNECTION_4G = 4,
  ComRequest_Device_Connection_ADX_CONNECTION_5G = 5
};
bool ComRequest_Device_Connection_IsValid(int value);
const ComRequest_Device_Connection ComRequest_Device_Connection_Connection_MIN = ComRequest_Device_Connection_ADX_CONNECTION_UNKNOWN;
const ComRequest_Device_Connection ComRequest_Device_Connection_Connection_MAX = ComRequest_Device_Connection_ADX_CONNECTION_5G;
const int ComRequest_Device_Connection_Connection_ARRAYSIZE = ComRequest_Device_Connection_Connection_MAX + 1;

const ::google::protobuf::EnumDescriptor* ComRequest_Device_Connection_descriptor();
inline const ::std::string& ComRequest_Device_Connection_Name(ComRequest_Device_Connection value) {
  return ::google::protobuf::internal::NameOfEnum(
    ComRequest_Device_Connection_descriptor(), value);
}
inline bool ComRequest_Device_Connection_Parse(
    const ::std::string& name, ComRequest_Device_Connection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ComRequest_Device_Connection>(
    ComRequest_Device_Connection_descriptor(), name, value);
}
enum ComResponse_AdxSlot_AdxSlotType {
  ComResponse_AdxSlot_AdxSlotType_ADX_SLOT_UNKNOWN = 0,
  ComResponse_AdxSlot_AdxSlotType_ADX_SLOT_BANNER = 1,
  ComResponse_AdxSlot_AdxSlotType_ADX_SLOT_NATIVE = 2,
  ComResponse_AdxSlot_AdxSlotType_ADX_SLOT_VIDEO = 3
};
bool ComResponse_AdxSlot_AdxSlotType_IsValid(int value);
const ComResponse_AdxSlot_AdxSlotType ComResponse_AdxSlot_AdxSlotType_AdxSlotType_MIN = ComResponse_AdxSlot_AdxSlotType_ADX_SLOT_UNKNOWN;
const ComResponse_AdxSlot_AdxSlotType ComResponse_AdxSlot_AdxSlotType_AdxSlotType_MAX = ComResponse_AdxSlot_AdxSlotType_ADX_SLOT_VIDEO;
const int ComResponse_AdxSlot_AdxSlotType_AdxSlotType_ARRAYSIZE = ComResponse_AdxSlot_AdxSlotType_AdxSlotType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ComResponse_AdxSlot_AdxSlotType_descriptor();
inline const ::std::string& ComResponse_AdxSlot_AdxSlotType_Name(ComResponse_AdxSlot_AdxSlotType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ComResponse_AdxSlot_AdxSlotType_descriptor(), value);
}
inline bool ComResponse_AdxSlot_AdxSlotType_Parse(
    const ::std::string& name, ComResponse_AdxSlot_AdxSlotType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ComResponse_AdxSlot_AdxSlotType>(
    ComResponse_AdxSlot_AdxSlotType_descriptor(), name, value);
}
// ===================================================================

class ComRequest_AdxSlot_Banner : public ::google::protobuf::Message {
 public:
  ComRequest_AdxSlot_Banner();
  virtual ~ComRequest_AdxSlot_Banner();

  ComRequest_AdxSlot_Banner(const ComRequest_AdxSlot_Banner& from);

  inline ComRequest_AdxSlot_Banner& operator=(const ComRequest_AdxSlot_Banner& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComRequest_AdxSlot_Banner& default_instance();

  void Swap(ComRequest_AdxSlot_Banner* other);

  // implements Message ----------------------------------------------

  ComRequest_AdxSlot_Banner* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComRequest_AdxSlot_Banner& from);
  void MergeFrom(const ComRequest_AdxSlot_Banner& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 width = 1;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 1;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ComRequest.AdxSlot.Banner)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  friend void  protobuf_AddDesc_adx_5fcom_2eproto();
  friend void protobuf_AssignDesc_adx_5fcom_2eproto();
  friend void protobuf_ShutdownFile_adx_5fcom_2eproto();

  void InitAsDefaultInstance();
  static ComRequest_AdxSlot_Banner* default_instance_;
};
// -------------------------------------------------------------------

class ComRequest_AdxSlot_Native : public ::google::protobuf::Message {
 public:
  ComRequest_AdxSlot_Native();
  virtual ~ComRequest_AdxSlot_Native();

  ComRequest_AdxSlot_Native(const ComRequest_AdxSlot_Native& from);

  inline ComRequest_AdxSlot_Native& operator=(const ComRequest_AdxSlot_Native& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComRequest_AdxSlot_Native& default_instance();

  void Swap(ComRequest_AdxSlot_Native* other);

  // implements Message ----------------------------------------------

  ComRequest_AdxSlot_Native* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComRequest_AdxSlot_Native& from);
  void MergeFrom(const ComRequest_AdxSlot_Native& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 icon_width = 1;
  inline bool has_icon_width() const;
  inline void clear_icon_width();
  static const int kIconWidthFieldNumber = 1;
  inline ::google::protobuf::int32 icon_width() const;
  inline void set_icon_width(::google::protobuf::int32 value);

  // optional int32 icon_height = 2;
  inline bool has_icon_height() const;
  inline void clear_icon_height();
  static const int kIconHeightFieldNumber = 2;
  inline ::google::protobuf::int32 icon_height() const;
  inline void set_icon_height(::google::protobuf::int32 value);

  // optional int32 width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 4;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ComRequest.AdxSlot.Native)
 private:
  inline void set_has_icon_width();
  inline void clear_has_icon_width();
  inline void set_has_icon_height();
  inline void clear_has_icon_height();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 icon_width_;
  ::google::protobuf::int32 icon_height_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  friend void  protobuf_AddDesc_adx_5fcom_2eproto();
  friend void protobuf_AssignDesc_adx_5fcom_2eproto();
  friend void protobuf_ShutdownFile_adx_5fcom_2eproto();

  void InitAsDefaultInstance();
  static ComRequest_AdxSlot_Native* default_instance_;
};
// -------------------------------------------------------------------

class ComRequest_AdxSlot_Video : public ::google::protobuf::Message {
 public:
  ComRequest_AdxSlot_Video();
  virtual ~ComRequest_AdxSlot_Video();

  ComRequest_AdxSlot_Video(const ComRequest_AdxSlot_Video& from);

  inline ComRequest_AdxSlot_Video& operator=(const ComRequest_AdxSlot_Video& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComRequest_AdxSlot_Video& default_instance();

  void Swap(ComRequest_AdxSlot_Video* other);

  // implements Message ----------------------------------------------

  ComRequest_AdxSlot_Video* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComRequest_AdxSlot_Video& from);
  void MergeFrom(const ComRequest_AdxSlot_Video& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 width = 1;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 1;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int32 min_duration = 3;
  inline bool has_min_duration() const;
  inline void clear_min_duration();
  static const int kMinDurationFieldNumber = 3;
  inline ::google::protobuf::int32 min_duration() const;
  inline void set_min_duration(::google::protobuf::int32 value);

  // optional int32 max_duration = 4;
  inline bool has_max_duration() const;
  inline void clear_max_duration();
  static const int kMaxDurationFieldNumber = 4;
  inline ::google::protobuf::int32 max_duration() const;
  inline void set_max_duration(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ComRequest.AdxSlot.Video)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_min_duration();
  inline void clear_has_min_duration();
  inline void set_has_max_duration();
  inline void clear_has_max_duration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 min_duration_;
  ::google::protobuf::int32 max_duration_;
  friend void  protobuf_AddDesc_adx_5fcom_2eproto();
  friend void protobuf_AssignDesc_adx_5fcom_2eproto();
  friend void protobuf_ShutdownFile_adx_5fcom_2eproto();

  void InitAsDefaultInstance();
  static ComRequest_AdxSlot_Video* default_instance_;
};
// -------------------------------------------------------------------

class ComRequest_AdxSlot : public ::google::protobuf::Message {
 public:
  ComRequest_AdxSlot();
  virtual ~ComRequest_AdxSlot();

  ComRequest_AdxSlot(const ComRequest_AdxSlot& from);

  inline ComRequest_AdxSlot& operator=(const ComRequest_AdxSlot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComRequest_AdxSlot& default_instance();

  void Swap(ComRequest_AdxSlot* other);

  // implements Message ----------------------------------------------

  ComRequest_AdxSlot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComRequest_AdxSlot& from);
  void MergeFrom(const ComRequest_AdxSlot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ComRequest_AdxSlot_Banner Banner;
  typedef ComRequest_AdxSlot_Native Native;
  typedef ComRequest_AdxSlot_Video Video;

  typedef ComRequest_AdxSlot_AdxSlotType AdxSlotType;
  static const AdxSlotType ADX_SLOT_UNKNOWN = ComRequest_AdxSlot_AdxSlotType_ADX_SLOT_UNKNOWN;
  static const AdxSlotType ADX_SLOT_BANNER = ComRequest_AdxSlot_AdxSlotType_ADX_SLOT_BANNER;
  static const AdxSlotType ADX_SLOT_NATIVE = ComRequest_AdxSlot_AdxSlotType_ADX_SLOT_NATIVE;
  static const AdxSlotType ADX_SLOT_VIDEO = ComRequest_AdxSlot_AdxSlotType_ADX_SLOT_VIDEO;
  static inline bool AdxSlotType_IsValid(int value) {
    return ComRequest_AdxSlot_AdxSlotType_IsValid(value);
  }
  static const AdxSlotType AdxSlotType_MIN =
    ComRequest_AdxSlot_AdxSlotType_AdxSlotType_MIN;
  static const AdxSlotType AdxSlotType_MAX =
    ComRequest_AdxSlot_AdxSlotType_AdxSlotType_MAX;
  static const int AdxSlotType_ARRAYSIZE =
    ComRequest_AdxSlot_AdxSlotType_AdxSlotType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AdxSlotType_descriptor() {
    return ComRequest_AdxSlot_AdxSlotType_descriptor();
  }
  static inline const ::std::string& AdxSlotType_Name(AdxSlotType value) {
    return ComRequest_AdxSlot_AdxSlotType_Name(value);
  }
  static inline bool AdxSlotType_Parse(const ::std::string& name,
      AdxSlotType* value) {
    return ComRequest_AdxSlot_AdxSlotType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string adx_slot_id = 1;
  inline bool has_adx_slot_id() const;
  inline void clear_adx_slot_id();
  static const int kAdxSlotIdFieldNumber = 1;
  inline const ::std::string& adx_slot_id() const;
  inline void set_adx_slot_id(const ::std::string& value);
  inline void set_adx_slot_id(const char* value);
  inline void set_adx_slot_id(const char* value, size_t size);
  inline ::std::string* mutable_adx_slot_id();
  inline ::std::string* release_adx_slot_id();
  inline void set_allocated_adx_slot_id(::std::string* adx_slot_id);

  // optional int32 adx_slot_sequence_id = 2;
  inline bool has_adx_slot_sequence_id() const;
  inline void clear_adx_slot_sequence_id();
  static const int kAdxSlotSequenceIdFieldNumber = 2;
  inline ::google::protobuf::int32 adx_slot_sequence_id() const;
  inline void set_adx_slot_sequence_id(::google::protobuf::int32 value);

  // optional .ComRequest.AdxSlot.AdxSlotType adx_slot_type = 3;
  inline bool has_adx_slot_type() const;
  inline void clear_adx_slot_type();
  static const int kAdxSlotTypeFieldNumber = 3;
  inline ::ComRequest_AdxSlot_AdxSlotType adx_slot_type() const;
  inline void set_adx_slot_type(::ComRequest_AdxSlot_AdxSlotType value);

  // optional .ComRequest.AdxSlot.Banner banner = 4;
  inline bool has_banner() const;
  inline void clear_banner();
  static const int kBannerFieldNumber = 4;
  inline const ::ComRequest_AdxSlot_Banner& banner() const;
  inline ::ComRequest_AdxSlot_Banner* mutable_banner();
  inline ::ComRequest_AdxSlot_Banner* release_banner();
  inline void set_allocated_banner(::ComRequest_AdxSlot_Banner* banner);

  // optional .ComRequest.AdxSlot.Native native = 5;
  inline bool has_native() const;
  inline void clear_native();
  static const int kNativeFieldNumber = 5;
  inline const ::ComRequest_AdxSlot_Native& native() const;
  inline ::ComRequest_AdxSlot_Native* mutable_native();
  inline ::ComRequest_AdxSlot_Native* release_native();
  inline void set_allocated_native(::ComRequest_AdxSlot_Native* native);

  // optional .ComRequest.AdxSlot.Video video = 6;
  inline bool has_video() const;
  inline void clear_video();
  static const int kVideoFieldNumber = 6;
  inline const ::ComRequest_AdxSlot_Video& video() const;
  inline ::ComRequest_AdxSlot_Video* mutable_video();
  inline ::ComRequest_AdxSlot_Video* release_video();
  inline void set_allocated_video(::ComRequest_AdxSlot_Video* video);

  // optional int32 price_floor = 7;
  inline bool has_price_floor() const;
  inline void clear_price_floor();
  static const int kPriceFloorFieldNumber = 7;
  inline ::google::protobuf::int32 price_floor() const;
  inline void set_price_floor(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ComRequest.AdxSlot)
 private:
  inline void set_has_adx_slot_id();
  inline void clear_has_adx_slot_id();
  inline void set_has_adx_slot_sequence_id();
  inline void clear_has_adx_slot_sequence_id();
  inline void set_has_adx_slot_type();
  inline void clear_has_adx_slot_type();
  inline void set_has_banner();
  inline void clear_has_banner();
  inline void set_has_native();
  inline void clear_has_native();
  inline void set_has_video();
  inline void clear_has_video();
  inline void set_has_price_floor();
  inline void clear_has_price_floor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* adx_slot_id_;
  ::google::protobuf::int32 adx_slot_sequence_id_;
  int adx_slot_type_;
  ::ComRequest_AdxSlot_Banner* banner_;
  ::ComRequest_AdxSlot_Native* native_;
  ::ComRequest_AdxSlot_Video* video_;
  ::google::protobuf::int32 price_floor_;
  friend void  protobuf_AddDesc_adx_5fcom_2eproto();
  friend void protobuf_AssignDesc_adx_5fcom_2eproto();
  friend void protobuf_ShutdownFile_adx_5fcom_2eproto();

  void InitAsDefaultInstance();
  static ComRequest_AdxSlot* default_instance_;
};
// -------------------------------------------------------------------

class ComRequest_Device_DeviceID : public ::google::protobuf::Message {
 public:
  ComRequest_Device_DeviceID();
  virtual ~ComRequest_Device_DeviceID();

  ComRequest_Device_DeviceID(const ComRequest_Device_DeviceID& from);

  inline ComRequest_Device_DeviceID& operator=(const ComRequest_Device_DeviceID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComRequest_Device_DeviceID& default_instance();

  void Swap(ComRequest_Device_DeviceID* other);

  // implements Message ----------------------------------------------

  ComRequest_Device_DeviceID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComRequest_Device_DeviceID& from);
  void MergeFrom(const ComRequest_Device_DeviceID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional .ComRequest.Device.DeviceIdType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::ComRequest_Device_DeviceIdType type() const;
  inline void set_type(::ComRequest_Device_DeviceIdType value);

  // @@protoc_insertion_point(class_scope:ComRequest.Device.DeviceID)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  int type_;
  friend void  protobuf_AddDesc_adx_5fcom_2eproto();
  friend void protobuf_AssignDesc_adx_5fcom_2eproto();
  friend void protobuf_ShutdownFile_adx_5fcom_2eproto();

  void InitAsDefaultInstance();
  static ComRequest_Device_DeviceID* default_instance_;
};
// -------------------------------------------------------------------

class ComRequest_Device : public ::google::protobuf::Message {
 public:
  ComRequest_Device();
  virtual ~ComRequest_Device();

  ComRequest_Device(const ComRequest_Device& from);

  inline ComRequest_Device& operator=(const ComRequest_Device& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComRequest_Device& default_instance();

  void Swap(ComRequest_Device* other);

  // implements Message ----------------------------------------------

  ComRequest_Device* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComRequest_Device& from);
  void MergeFrom(const ComRequest_Device& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ComRequest_Device_DeviceID DeviceID;

  typedef ComRequest_Device_DeviceIdType DeviceIdType;
  static const DeviceIdType ADX_DEVICEID_UNKNOW = ComRequest_Device_DeviceIdType_ADX_DEVICEID_UNKNOW;
  static const DeviceIdType ADX_DEVICEID_IMEI = ComRequest_Device_DeviceIdType_ADX_DEVICEID_IMEI;
  static const DeviceIdType ADX_DEVICEID_IMEI_SHA1 = ComRequest_Device_DeviceIdType_ADX_DEVICEID_IMEI_SHA1;
  static const DeviceIdType ADX_DEVICEID_IMEI_MD5 = ComRequest_Device_DeviceIdType_ADX_DEVICEID_IMEI_MD5;
  static const DeviceIdType ADX_DEVICEID_ANDROID_ID = ComRequest_Device_DeviceIdType_ADX_DEVICEID_ANDROID_ID;
  static const DeviceIdType ADX_DEVICEID_ANDROID_ID_SHA1 = ComRequest_Device_DeviceIdType_ADX_DEVICEID_ANDROID_ID_SHA1;
  static const DeviceIdType ADX_DEVICEID_ANDROID_ID_MD5 = ComRequest_Device_DeviceIdType_ADX_DEVICEID_ANDROID_ID_MD5;
  static const DeviceIdType ADX_DEVICEID_IDFA = ComRequest_Device_DeviceIdType_ADX_DEVICEID_IDFA;
  static const DeviceIdType ADX_DEVICEID_IDFA_SHA1 = ComRequest_Device_DeviceIdType_ADX_DEVICEID_IDFA_SHA1;
  static const DeviceIdType ADX_DEVICEID_IDFA_MD5 = ComRequest_Device_DeviceIdType_ADX_DEVICEID_IDFA_MD5;
  static const DeviceIdType ADX_DEVICEID_MAC = ComRequest_Device_DeviceIdType_ADX_DEVICEID_MAC;
  static const DeviceIdType ADX_DEVICEID_MAC_SHA1 = ComRequest_Device_DeviceIdType_ADX_DEVICEID_MAC_SHA1;
  static const DeviceIdType ADX_DEVICEID_MAC_MD5 = ComRequest_Device_DeviceIdType_ADX_DEVICEID_MAC_MD5;
  static inline bool DeviceIdType_IsValid(int value) {
    return ComRequest_Device_DeviceIdType_IsValid(value);
  }
  static const DeviceIdType DeviceIdType_MIN =
    ComRequest_Device_DeviceIdType_DeviceIdType_MIN;
  static const DeviceIdType DeviceIdType_MAX =
    ComRequest_Device_DeviceIdType_DeviceIdType_MAX;
  static const int DeviceIdType_ARRAYSIZE =
    ComRequest_Device_DeviceIdType_DeviceIdType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DeviceIdType_descriptor() {
    return ComRequest_Device_DeviceIdType_descriptor();
  }
  static inline const ::std::string& DeviceIdType_Name(DeviceIdType value) {
    return ComRequest_Device_DeviceIdType_Name(value);
  }
  static inline bool DeviceIdType_Parse(const ::std::string& name,
      DeviceIdType* value) {
    return ComRequest_Device_DeviceIdType_Parse(name, value);
  }

  typedef ComRequest_Device_DeviceType DeviceType;
  static const DeviceType ADX_DEVICE_UNKNOWN = ComRequest_Device_DeviceType_ADX_DEVICE_UNKNOWN;
  static const DeviceType ADX_DEVICE_MOBILE = ComRequest_Device_DeviceType_ADX_DEVICE_MOBILE;
  static const DeviceType ADX_DEVICE_PAD = ComRequest_Device_DeviceType_ADX_DEVICE_PAD;
  static const DeviceType ADX_DEVICE_PC = ComRequest_Device_DeviceType_ADX_DEVICE_PC;
  static inline bool DeviceType_IsValid(int value) {
    return ComRequest_Device_DeviceType_IsValid(value);
  }
  static const DeviceType DeviceType_MIN =
    ComRequest_Device_DeviceType_DeviceType_MIN;
  static const DeviceType DeviceType_MAX =
    ComRequest_Device_DeviceType_DeviceType_MAX;
  static const int DeviceType_ARRAYSIZE =
    ComRequest_Device_DeviceType_DeviceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DeviceType_descriptor() {
    return ComRequest_Device_DeviceType_descriptor();
  }
  static inline const ::std::string& DeviceType_Name(DeviceType value) {
    return ComRequest_Device_DeviceType_Name(value);
  }
  static inline bool DeviceType_Parse(const ::std::string& name,
      DeviceType* value) {
    return ComRequest_Device_DeviceType_Parse(name, value);
  }

  typedef ComRequest_Device_OS OS;
  static const OS ADX_OS_UNKNOWN = ComRequest_Device_OS_ADX_OS_UNKNOWN;
  static const OS ADX_OS_IOS = ComRequest_Device_OS_ADX_OS_IOS;
  static const OS ADX_OS_ANDROID = ComRequest_Device_OS_ADX_OS_ANDROID;
  static const OS ADX_OS_WINDOWS = ComRequest_Device_OS_ADX_OS_WINDOWS;
  static inline bool OS_IsValid(int value) {
    return ComRequest_Device_OS_IsValid(value);
  }
  static const OS OS_MIN =
    ComRequest_Device_OS_OS_MIN;
  static const OS OS_MAX =
    ComRequest_Device_OS_OS_MAX;
  static const int OS_ARRAYSIZE =
    ComRequest_Device_OS_OS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OS_descriptor() {
    return ComRequest_Device_OS_descriptor();
  }
  static inline const ::std::string& OS_Name(OS value) {
    return ComRequest_Device_OS_Name(value);
  }
  static inline bool OS_Parse(const ::std::string& name,
      OS* value) {
    return ComRequest_Device_OS_Parse(name, value);
  }

  typedef ComRequest_Device_Carrier Carrier;
  static const Carrier ADX_CARRIER_UNKNOWN = ComRequest_Device_Carrier_ADX_CARRIER_UNKNOWN;
  static const Carrier ADX_CARRIER_CHINA_MOBILE = ComRequest_Device_Carrier_ADX_CARRIER_CHINA_MOBILE;
  static const Carrier ADX_CARRIER_CHINA_UNICOM = ComRequest_Device_Carrier_ADX_CARRIER_CHINA_UNICOM;
  static const Carrier ADX_CARRIER_CHINA_TELECOM = ComRequest_Device_Carrier_ADX_CARRIER_CHINA_TELECOM;
  static inline bool Carrier_IsValid(int value) {
    return ComRequest_Device_Carrier_IsValid(value);
  }
  static const Carrier Carrier_MIN =
    ComRequest_Device_Carrier_Carrier_MIN;
  static const Carrier Carrier_MAX =
    ComRequest_Device_Carrier_Carrier_MAX;
  static const int Carrier_ARRAYSIZE =
    ComRequest_Device_Carrier_Carrier_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Carrier_descriptor() {
    return ComRequest_Device_Carrier_descriptor();
  }
  static inline const ::std::string& Carrier_Name(Carrier value) {
    return ComRequest_Device_Carrier_Name(value);
  }
  static inline bool Carrier_Parse(const ::std::string& name,
      Carrier* value) {
    return ComRequest_Device_Carrier_Parse(name, value);
  }

  typedef ComRequest_Device_Connection Connection;
  static const Connection ADX_CONNECTION_UNKNOWN = ComRequest_Device_Connection_ADX_CONNECTION_UNKNOWN;
  static const Connection ADX_CONNECTION_WIFI = ComRequest_Device_Connection_ADX_CONNECTION_WIFI;
  static const Connection ADX_CONNECTION_2G = ComRequest_Device_Connection_ADX_CONNECTION_2G;
  static const Connection ADX_CONNECTION_3G = ComRequest_Device_Connection_ADX_CONNECTION_3G;
  static const Connection ADX_CONNECTION_4G = ComRequest_Device_Connection_ADX_CONNECTION_4G;
  static const Connection ADX_CONNECTION_5G = ComRequest_Device_Connection_ADX_CONNECTION_5G;
  static inline bool Connection_IsValid(int value) {
    return ComRequest_Device_Connection_IsValid(value);
  }
  static const Connection Connection_MIN =
    ComRequest_Device_Connection_Connection_MIN;
  static const Connection Connection_MAX =
    ComRequest_Device_Connection_Connection_MAX;
  static const int Connection_ARRAYSIZE =
    ComRequest_Device_Connection_Connection_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Connection_descriptor() {
    return ComRequest_Device_Connection_descriptor();
  }
  static inline const ::std::string& Connection_Name(Connection value) {
    return ComRequest_Device_Connection_Name(value);
  }
  static inline bool Connection_Parse(const ::std::string& name,
      Connection* value) {
    return ComRequest_Device_Connection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ComRequest.Device.DeviceID device_id = 1;
  inline int device_id_size() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  inline const ::ComRequest_Device_DeviceID& device_id(int index) const;
  inline ::ComRequest_Device_DeviceID* mutable_device_id(int index);
  inline ::ComRequest_Device_DeviceID* add_device_id();
  inline const ::google::protobuf::RepeatedPtrField< ::ComRequest_Device_DeviceID >&
      device_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::ComRequest_Device_DeviceID >*
      mutable_device_id();

  // optional .ComRequest.Device.DeviceType device_type = 2;
  inline bool has_device_type() const;
  inline void clear_device_type();
  static const int kDeviceTypeFieldNumber = 2;
  inline ::ComRequest_Device_DeviceType device_type() const;
  inline void set_device_type(::ComRequest_Device_DeviceType value);

  // optional .ComRequest.Device.OS os = 3;
  inline bool has_os() const;
  inline void clear_os();
  static const int kOsFieldNumber = 3;
  inline ::ComRequest_Device_OS os() const;
  inline void set_os(::ComRequest_Device_OS value);

  // optional string os_version = 4;
  inline bool has_os_version() const;
  inline void clear_os_version();
  static const int kOsVersionFieldNumber = 4;
  inline const ::std::string& os_version() const;
  inline void set_os_version(const ::std::string& value);
  inline void set_os_version(const char* value);
  inline void set_os_version(const char* value, size_t size);
  inline ::std::string* mutable_os_version();
  inline ::std::string* release_os_version();
  inline void set_allocated_os_version(::std::string* os_version);

  // optional .ComRequest.Device.Carrier carrier = 5;
  inline bool has_carrier() const;
  inline void clear_carrier();
  static const int kCarrierFieldNumber = 5;
  inline ::ComRequest_Device_Carrier carrier() const;
  inline void set_carrier(::ComRequest_Device_Carrier value);

  // optional .ComRequest.Device.Connection connection = 6;
  inline bool has_connection() const;
  inline void clear_connection();
  static const int kConnectionFieldNumber = 6;
  inline ::ComRequest_Device_Connection connection() const;
  inline void set_connection(::ComRequest_Device_Connection value);

  // optional string brand = 7;
  inline bool has_brand() const;
  inline void clear_brand();
  static const int kBrandFieldNumber = 7;
  inline const ::std::string& brand() const;
  inline void set_brand(const ::std::string& value);
  inline void set_brand(const char* value);
  inline void set_brand(const char* value, size_t size);
  inline ::std::string* mutable_brand();
  inline ::std::string* release_brand();
  inline void set_allocated_brand(::std::string* brand);

  // optional string model = 8;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 8;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  inline void set_allocated_model(::std::string* model);

  // optional string user_agent = 9;
  inline bool has_user_agent() const;
  inline void clear_user_agent();
  static const int kUserAgentFieldNumber = 9;
  inline const ::std::string& user_agent() const;
  inline void set_user_agent(const ::std::string& value);
  inline void set_user_agent(const char* value);
  inline void set_user_agent(const char* value, size_t size);
  inline ::std::string* mutable_user_agent();
  inline ::std::string* release_user_agent();
  inline void set_allocated_user_agent(::std::string* user_agent);

  // optional string ip = 10;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 10;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:ComRequest.Device)
 private:
  inline void set_has_device_type();
  inline void clear_has_device_type();
  inline void set_has_os();
  inline void clear_has_os();
  inline void set_has_os_version();
  inline void clear_has_os_version();
  inline void set_has_carrier();
  inline void clear_has_carrier();
  inline void set_has_connection();
  inline void clear_has_connection();
  inline void set_has_brand();
  inline void clear_has_brand();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_user_agent();
  inline void clear_has_user_agent();
  inline void set_has_ip();
  inline void clear_has_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ComRequest_Device_DeviceID > device_id_;
  int device_type_;
  int os_;
  ::std::string* os_version_;
  int carrier_;
  int connection_;
  ::std::string* brand_;
  ::std::string* model_;
  ::std::string* user_agent_;
  ::std::string* ip_;
  friend void  protobuf_AddDesc_adx_5fcom_2eproto();
  friend void protobuf_AssignDesc_adx_5fcom_2eproto();
  friend void protobuf_ShutdownFile_adx_5fcom_2eproto();

  void InitAsDefaultInstance();
  static ComRequest_Device* default_instance_;
};
// -------------------------------------------------------------------

class ComRequest_App : public ::google::protobuf::Message {
 public:
  ComRequest_App();
  virtual ~ComRequest_App();

  ComRequest_App(const ComRequest_App& from);

  inline ComRequest_App& operator=(const ComRequest_App& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComRequest_App& default_instance();

  void Swap(ComRequest_App* other);

  // implements Message ----------------------------------------------

  ComRequest_App* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComRequest_App& from);
  void MergeFrom(const ComRequest_App& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string app_id = 1;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  inline const ::std::string& app_id() const;
  inline void set_app_id(const ::std::string& value);
  inline void set_app_id(const char* value);
  inline void set_app_id(const char* value, size_t size);
  inline ::std::string* mutable_app_id();
  inline ::std::string* release_app_id();
  inline void set_allocated_app_id(::std::string* app_id);

  // optional int32 app_category = 2;
  inline bool has_app_category() const;
  inline void clear_app_category();
  static const int kAppCategoryFieldNumber = 2;
  inline ::google::protobuf::int32 app_category() const;
  inline void set_app_category(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ComRequest.App)
 private:
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_app_category();
  inline void clear_has_app_category();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* app_id_;
  ::google::protobuf::int32 app_category_;
  friend void  protobuf_AddDesc_adx_5fcom_2eproto();
  friend void protobuf_AssignDesc_adx_5fcom_2eproto();
  friend void protobuf_ShutdownFile_adx_5fcom_2eproto();

  void InitAsDefaultInstance();
  static ComRequest_App* default_instance_;
};
// -------------------------------------------------------------------

class ComRequest : public ::google::protobuf::Message {
 public:
  ComRequest();
  virtual ~ComRequest();

  ComRequest(const ComRequest& from);

  inline ComRequest& operator=(const ComRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComRequest& default_instance();

  void Swap(ComRequest* other);

  // implements Message ----------------------------------------------

  ComRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComRequest& from);
  void MergeFrom(const ComRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ComRequest_AdxSlot AdxSlot;
  typedef ComRequest_Device Device;
  typedef ComRequest_App App;

  // accessors -------------------------------------------------------

  // optional int32 adx = 1;
  inline bool has_adx() const;
  inline void clear_adx();
  static const int kAdxFieldNumber = 1;
  inline ::google::protobuf::int32 adx() const;
  inline void set_adx(::google::protobuf::int32 value);

  // optional string bid = 2;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 2;
  inline const ::std::string& bid() const;
  inline void set_bid(const ::std::string& value);
  inline void set_bid(const char* value);
  inline void set_bid(const char* value, size_t size);
  inline ::std::string* mutable_bid();
  inline ::std::string* release_bid();
  inline void set_allocated_bid(::std::string* bid);

  // repeated .ComRequest.AdxSlot adx_slot = 3;
  inline int adx_slot_size() const;
  inline void clear_adx_slot();
  static const int kAdxSlotFieldNumber = 3;
  inline const ::ComRequest_AdxSlot& adx_slot(int index) const;
  inline ::ComRequest_AdxSlot* mutable_adx_slot(int index);
  inline ::ComRequest_AdxSlot* add_adx_slot();
  inline const ::google::protobuf::RepeatedPtrField< ::ComRequest_AdxSlot >&
      adx_slot() const;
  inline ::google::protobuf::RepeatedPtrField< ::ComRequest_AdxSlot >*
      mutable_adx_slot();

  // optional .ComRequest.Device device = 4;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 4;
  inline const ::ComRequest_Device& device() const;
  inline ::ComRequest_Device* mutable_device();
  inline ::ComRequest_Device* release_device();
  inline void set_allocated_device(::ComRequest_Device* device);

  // optional .ComRequest.App app = 5;
  inline bool has_app() const;
  inline void clear_app();
  static const int kAppFieldNumber = 5;
  inline const ::ComRequest_App& app() const;
  inline ::ComRequest_App* mutable_app();
  inline ::ComRequest_App* release_app();
  inline void set_allocated_app(::ComRequest_App* app);

  // @@protoc_insertion_point(class_scope:ComRequest)
 private:
  inline void set_has_adx();
  inline void clear_has_adx();
  inline void set_has_bid();
  inline void clear_has_bid();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_app();
  inline void clear_has_app();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* bid_;
  ::google::protobuf::RepeatedPtrField< ::ComRequest_AdxSlot > adx_slot_;
  ::ComRequest_Device* device_;
  ::ComRequest_App* app_;
  ::google::protobuf::int32 adx_;
  friend void  protobuf_AddDesc_adx_5fcom_2eproto();
  friend void protobuf_AssignDesc_adx_5fcom_2eproto();
  friend void protobuf_ShutdownFile_adx_5fcom_2eproto();

  void InitAsDefaultInstance();
  static ComRequest* default_instance_;
};
// -------------------------------------------------------------------

class ComResponse_AdxSlot : public ::google::protobuf::Message {
 public:
  ComResponse_AdxSlot();
  virtual ~ComResponse_AdxSlot();

  ComResponse_AdxSlot(const ComResponse_AdxSlot& from);

  inline ComResponse_AdxSlot& operator=(const ComResponse_AdxSlot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComResponse_AdxSlot& default_instance();

  void Swap(ComResponse_AdxSlot* other);

  // implements Message ----------------------------------------------

  ComResponse_AdxSlot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComResponse_AdxSlot& from);
  void MergeFrom(const ComResponse_AdxSlot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ComResponse_AdxSlot_AdxSlotType AdxSlotType;
  static const AdxSlotType ADX_SLOT_UNKNOWN = ComResponse_AdxSlot_AdxSlotType_ADX_SLOT_UNKNOWN;
  static const AdxSlotType ADX_SLOT_BANNER = ComResponse_AdxSlot_AdxSlotType_ADX_SLOT_BANNER;
  static const AdxSlotType ADX_SLOT_NATIVE = ComResponse_AdxSlot_AdxSlotType_ADX_SLOT_NATIVE;
  static const AdxSlotType ADX_SLOT_VIDEO = ComResponse_AdxSlot_AdxSlotType_ADX_SLOT_VIDEO;
  static inline bool AdxSlotType_IsValid(int value) {
    return ComResponse_AdxSlot_AdxSlotType_IsValid(value);
  }
  static const AdxSlotType AdxSlotType_MIN =
    ComResponse_AdxSlot_AdxSlotType_AdxSlotType_MIN;
  static const AdxSlotType AdxSlotType_MAX =
    ComResponse_AdxSlot_AdxSlotType_AdxSlotType_MAX;
  static const int AdxSlotType_ARRAYSIZE =
    ComResponse_AdxSlot_AdxSlotType_AdxSlotType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AdxSlotType_descriptor() {
    return ComResponse_AdxSlot_AdxSlotType_descriptor();
  }
  static inline const ::std::string& AdxSlotType_Name(AdxSlotType value) {
    return ComResponse_AdxSlot_AdxSlotType_Name(value);
  }
  static inline bool AdxSlotType_Parse(const ::std::string& name,
      AdxSlotType* value) {
    return ComResponse_AdxSlot_AdxSlotType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string adx_slot_id = 1;
  inline bool has_adx_slot_id() const;
  inline void clear_adx_slot_id();
  static const int kAdxSlotIdFieldNumber = 1;
  inline const ::std::string& adx_slot_id() const;
  inline void set_adx_slot_id(const ::std::string& value);
  inline void set_adx_slot_id(const char* value);
  inline void set_adx_slot_id(const char* value, size_t size);
  inline ::std::string* mutable_adx_slot_id();
  inline ::std::string* release_adx_slot_id();
  inline void set_allocated_adx_slot_id(::std::string* adx_slot_id);

  // optional int32 adx_slot_sequence_id = 2;
  inline bool has_adx_slot_sequence_id() const;
  inline void clear_adx_slot_sequence_id();
  static const int kAdxSlotSequenceIdFieldNumber = 2;
  inline ::google::protobuf::int32 adx_slot_sequence_id() const;
  inline void set_adx_slot_sequence_id(::google::protobuf::int32 value);

  // optional .ComResponse.AdxSlot.AdxSlotType adx_slot_type = 3;
  inline bool has_adx_slot_type() const;
  inline void clear_adx_slot_type();
  static const int kAdxSlotTypeFieldNumber = 3;
  inline ::ComResponse_AdxSlot_AdxSlotType adx_slot_type() const;
  inline void set_adx_slot_type(::ComResponse_AdxSlot_AdxSlotType value);

  // optional int32 price = 4;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 4;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // optional string template = 5;
  inline bool has_template_() const;
  inline void clear_template_();
  static const int kTemplateFieldNumber = 5;
  inline const ::std::string& template_() const;
  inline void set_template_(const ::std::string& value);
  inline void set_template_(const char* value);
  inline void set_template_(const char* value, size_t size);
  inline ::std::string* mutable_template_();
  inline ::std::string* release_template_();
  inline void set_allocated_template_(::std::string* template_);

  // optional string ext = 6;
  inline bool has_ext() const;
  inline void clear_ext();
  static const int kExtFieldNumber = 6;
  inline const ::std::string& ext() const;
  inline void set_ext(const ::std::string& value);
  inline void set_ext(const char* value);
  inline void set_ext(const char* value, size_t size);
  inline ::std::string* mutable_ext();
  inline ::std::string* release_ext();
  inline void set_allocated_ext(::std::string* ext);

  // @@protoc_insertion_point(class_scope:ComResponse.AdxSlot)
 private:
  inline void set_has_adx_slot_id();
  inline void clear_has_adx_slot_id();
  inline void set_has_adx_slot_sequence_id();
  inline void clear_has_adx_slot_sequence_id();
  inline void set_has_adx_slot_type();
  inline void clear_has_adx_slot_type();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_template_();
  inline void clear_has_template_();
  inline void set_has_ext();
  inline void clear_has_ext();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* adx_slot_id_;
  ::google::protobuf::int32 adx_slot_sequence_id_;
  int adx_slot_type_;
  ::std::string* template__;
  ::std::string* ext_;
  ::google::protobuf::int32 price_;
  friend void  protobuf_AddDesc_adx_5fcom_2eproto();
  friend void protobuf_AssignDesc_adx_5fcom_2eproto();
  friend void protobuf_ShutdownFile_adx_5fcom_2eproto();

  void InitAsDefaultInstance();
  static ComResponse_AdxSlot* default_instance_;
};
// -------------------------------------------------------------------

class ComResponse : public ::google::protobuf::Message {
 public:
  ComResponse();
  virtual ~ComResponse();

  ComResponse(const ComResponse& from);

  inline ComResponse& operator=(const ComResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComResponse& default_instance();

  void Swap(ComResponse* other);

  // implements Message ----------------------------------------------

  ComResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComResponse& from);
  void MergeFrom(const ComResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ComResponse_AdxSlot AdxSlot;

  // accessors -------------------------------------------------------

  // optional string bid = 1;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 1;
  inline const ::std::string& bid() const;
  inline void set_bid(const ::std::string& value);
  inline void set_bid(const char* value);
  inline void set_bid(const char* value, size_t size);
  inline ::std::string* mutable_bid();
  inline ::std::string* release_bid();
  inline void set_allocated_bid(::std::string* bid);

  // repeated .ComResponse.AdxSlot adx_slot = 2;
  inline int adx_slot_size() const;
  inline void clear_adx_slot();
  static const int kAdxSlotFieldNumber = 2;
  inline const ::ComResponse_AdxSlot& adx_slot(int index) const;
  inline ::ComResponse_AdxSlot* mutable_adx_slot(int index);
  inline ::ComResponse_AdxSlot* add_adx_slot();
  inline const ::google::protobuf::RepeatedPtrField< ::ComResponse_AdxSlot >&
      adx_slot() const;
  inline ::google::protobuf::RepeatedPtrField< ::ComResponse_AdxSlot >*
      mutable_adx_slot();

  // @@protoc_insertion_point(class_scope:ComResponse)
 private:
  inline void set_has_bid();
  inline void clear_has_bid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* bid_;
  ::google::protobuf::RepeatedPtrField< ::ComResponse_AdxSlot > adx_slot_;
  friend void  protobuf_AddDesc_adx_5fcom_2eproto();
  friend void protobuf_AssignDesc_adx_5fcom_2eproto();
  friend void protobuf_ShutdownFile_adx_5fcom_2eproto();

  void InitAsDefaultInstance();
  static ComResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// ComRequest_AdxSlot_Banner

// optional int32 width = 1;
inline bool ComRequest_AdxSlot_Banner::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComRequest_AdxSlot_Banner::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComRequest_AdxSlot_Banner::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComRequest_AdxSlot_Banner::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 ComRequest_AdxSlot_Banner::width() const {
  // @@protoc_insertion_point(field_get:ComRequest.AdxSlot.Banner.width)
  return width_;
}
inline void ComRequest_AdxSlot_Banner::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ComRequest.AdxSlot.Banner.width)
}

// optional int32 height = 2;
inline bool ComRequest_AdxSlot_Banner::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComRequest_AdxSlot_Banner::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ComRequest_AdxSlot_Banner::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ComRequest_AdxSlot_Banner::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 ComRequest_AdxSlot_Banner::height() const {
  // @@protoc_insertion_point(field_get:ComRequest.AdxSlot.Banner.height)
  return height_;
}
inline void ComRequest_AdxSlot_Banner::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ComRequest.AdxSlot.Banner.height)
}

// -------------------------------------------------------------------

// ComRequest_AdxSlot_Native

// optional int32 icon_width = 1;
inline bool ComRequest_AdxSlot_Native::has_icon_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComRequest_AdxSlot_Native::set_has_icon_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComRequest_AdxSlot_Native::clear_has_icon_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComRequest_AdxSlot_Native::clear_icon_width() {
  icon_width_ = 0;
  clear_has_icon_width();
}
inline ::google::protobuf::int32 ComRequest_AdxSlot_Native::icon_width() const {
  // @@protoc_insertion_point(field_get:ComRequest.AdxSlot.Native.icon_width)
  return icon_width_;
}
inline void ComRequest_AdxSlot_Native::set_icon_width(::google::protobuf::int32 value) {
  set_has_icon_width();
  icon_width_ = value;
  // @@protoc_insertion_point(field_set:ComRequest.AdxSlot.Native.icon_width)
}

// optional int32 icon_height = 2;
inline bool ComRequest_AdxSlot_Native::has_icon_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComRequest_AdxSlot_Native::set_has_icon_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ComRequest_AdxSlot_Native::clear_has_icon_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ComRequest_AdxSlot_Native::clear_icon_height() {
  icon_height_ = 0;
  clear_has_icon_height();
}
inline ::google::protobuf::int32 ComRequest_AdxSlot_Native::icon_height() const {
  // @@protoc_insertion_point(field_get:ComRequest.AdxSlot.Native.icon_height)
  return icon_height_;
}
inline void ComRequest_AdxSlot_Native::set_icon_height(::google::protobuf::int32 value) {
  set_has_icon_height();
  icon_height_ = value;
  // @@protoc_insertion_point(field_set:ComRequest.AdxSlot.Native.icon_height)
}

// optional int32 width = 3;
inline bool ComRequest_AdxSlot_Native::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ComRequest_AdxSlot_Native::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ComRequest_AdxSlot_Native::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ComRequest_AdxSlot_Native::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 ComRequest_AdxSlot_Native::width() const {
  // @@protoc_insertion_point(field_get:ComRequest.AdxSlot.Native.width)
  return width_;
}
inline void ComRequest_AdxSlot_Native::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ComRequest.AdxSlot.Native.width)
}

// optional int32 height = 4;
inline bool ComRequest_AdxSlot_Native::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ComRequest_AdxSlot_Native::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ComRequest_AdxSlot_Native::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ComRequest_AdxSlot_Native::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 ComRequest_AdxSlot_Native::height() const {
  // @@protoc_insertion_point(field_get:ComRequest.AdxSlot.Native.height)
  return height_;
}
inline void ComRequest_AdxSlot_Native::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ComRequest.AdxSlot.Native.height)
}

// -------------------------------------------------------------------

// ComRequest_AdxSlot_Video

// optional int32 width = 1;
inline bool ComRequest_AdxSlot_Video::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComRequest_AdxSlot_Video::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComRequest_AdxSlot_Video::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComRequest_AdxSlot_Video::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 ComRequest_AdxSlot_Video::width() const {
  // @@protoc_insertion_point(field_get:ComRequest.AdxSlot.Video.width)
  return width_;
}
inline void ComRequest_AdxSlot_Video::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ComRequest.AdxSlot.Video.width)
}

// optional int32 height = 2;
inline bool ComRequest_AdxSlot_Video::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComRequest_AdxSlot_Video::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ComRequest_AdxSlot_Video::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ComRequest_AdxSlot_Video::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 ComRequest_AdxSlot_Video::height() const {
  // @@protoc_insertion_point(field_get:ComRequest.AdxSlot.Video.height)
  return height_;
}
inline void ComRequest_AdxSlot_Video::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ComRequest.AdxSlot.Video.height)
}

// optional int32 min_duration = 3;
inline bool ComRequest_AdxSlot_Video::has_min_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ComRequest_AdxSlot_Video::set_has_min_duration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ComRequest_AdxSlot_Video::clear_has_min_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ComRequest_AdxSlot_Video::clear_min_duration() {
  min_duration_ = 0;
  clear_has_min_duration();
}
inline ::google::protobuf::int32 ComRequest_AdxSlot_Video::min_duration() const {
  // @@protoc_insertion_point(field_get:ComRequest.AdxSlot.Video.min_duration)
  return min_duration_;
}
inline void ComRequest_AdxSlot_Video::set_min_duration(::google::protobuf::int32 value) {
  set_has_min_duration();
  min_duration_ = value;
  // @@protoc_insertion_point(field_set:ComRequest.AdxSlot.Video.min_duration)
}

// optional int32 max_duration = 4;
inline bool ComRequest_AdxSlot_Video::has_max_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ComRequest_AdxSlot_Video::set_has_max_duration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ComRequest_AdxSlot_Video::clear_has_max_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ComRequest_AdxSlot_Video::clear_max_duration() {
  max_duration_ = 0;
  clear_has_max_duration();
}
inline ::google::protobuf::int32 ComRequest_AdxSlot_Video::max_duration() const {
  // @@protoc_insertion_point(field_get:ComRequest.AdxSlot.Video.max_duration)
  return max_duration_;
}
inline void ComRequest_AdxSlot_Video::set_max_duration(::google::protobuf::int32 value) {
  set_has_max_duration();
  max_duration_ = value;
  // @@protoc_insertion_point(field_set:ComRequest.AdxSlot.Video.max_duration)
}

// -------------------------------------------------------------------

// ComRequest_AdxSlot

// optional string adx_slot_id = 1;
inline bool ComRequest_AdxSlot::has_adx_slot_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComRequest_AdxSlot::set_has_adx_slot_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComRequest_AdxSlot::clear_has_adx_slot_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComRequest_AdxSlot::clear_adx_slot_id() {
  if (adx_slot_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adx_slot_id_->clear();
  }
  clear_has_adx_slot_id();
}
inline const ::std::string& ComRequest_AdxSlot::adx_slot_id() const {
  // @@protoc_insertion_point(field_get:ComRequest.AdxSlot.adx_slot_id)
  return *adx_slot_id_;
}
inline void ComRequest_AdxSlot::set_adx_slot_id(const ::std::string& value) {
  set_has_adx_slot_id();
  if (adx_slot_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adx_slot_id_ = new ::std::string;
  }
  adx_slot_id_->assign(value);
  // @@protoc_insertion_point(field_set:ComRequest.AdxSlot.adx_slot_id)
}
inline void ComRequest_AdxSlot::set_adx_slot_id(const char* value) {
  set_has_adx_slot_id();
  if (adx_slot_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adx_slot_id_ = new ::std::string;
  }
  adx_slot_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:ComRequest.AdxSlot.adx_slot_id)
}
inline void ComRequest_AdxSlot::set_adx_slot_id(const char* value, size_t size) {
  set_has_adx_slot_id();
  if (adx_slot_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adx_slot_id_ = new ::std::string;
  }
  adx_slot_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ComRequest.AdxSlot.adx_slot_id)
}
inline ::std::string* ComRequest_AdxSlot::mutable_adx_slot_id() {
  set_has_adx_slot_id();
  if (adx_slot_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adx_slot_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ComRequest.AdxSlot.adx_slot_id)
  return adx_slot_id_;
}
inline ::std::string* ComRequest_AdxSlot::release_adx_slot_id() {
  clear_has_adx_slot_id();
  if (adx_slot_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = adx_slot_id_;
    adx_slot_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComRequest_AdxSlot::set_allocated_adx_slot_id(::std::string* adx_slot_id) {
  if (adx_slot_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adx_slot_id_;
  }
  if (adx_slot_id) {
    set_has_adx_slot_id();
    adx_slot_id_ = adx_slot_id;
  } else {
    clear_has_adx_slot_id();
    adx_slot_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ComRequest.AdxSlot.adx_slot_id)
}

// optional int32 adx_slot_sequence_id = 2;
inline bool ComRequest_AdxSlot::has_adx_slot_sequence_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComRequest_AdxSlot::set_has_adx_slot_sequence_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ComRequest_AdxSlot::clear_has_adx_slot_sequence_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ComRequest_AdxSlot::clear_adx_slot_sequence_id() {
  adx_slot_sequence_id_ = 0;
  clear_has_adx_slot_sequence_id();
}
inline ::google::protobuf::int32 ComRequest_AdxSlot::adx_slot_sequence_id() const {
  // @@protoc_insertion_point(field_get:ComRequest.AdxSlot.adx_slot_sequence_id)
  return adx_slot_sequence_id_;
}
inline void ComRequest_AdxSlot::set_adx_slot_sequence_id(::google::protobuf::int32 value) {
  set_has_adx_slot_sequence_id();
  adx_slot_sequence_id_ = value;
  // @@protoc_insertion_point(field_set:ComRequest.AdxSlot.adx_slot_sequence_id)
}

// optional .ComRequest.AdxSlot.AdxSlotType adx_slot_type = 3;
inline bool ComRequest_AdxSlot::has_adx_slot_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ComRequest_AdxSlot::set_has_adx_slot_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ComRequest_AdxSlot::clear_has_adx_slot_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ComRequest_AdxSlot::clear_adx_slot_type() {
  adx_slot_type_ = 0;
  clear_has_adx_slot_type();
}
inline ::ComRequest_AdxSlot_AdxSlotType ComRequest_AdxSlot::adx_slot_type() const {
  // @@protoc_insertion_point(field_get:ComRequest.AdxSlot.adx_slot_type)
  return static_cast< ::ComRequest_AdxSlot_AdxSlotType >(adx_slot_type_);
}
inline void ComRequest_AdxSlot::set_adx_slot_type(::ComRequest_AdxSlot_AdxSlotType value) {
  assert(::ComRequest_AdxSlot_AdxSlotType_IsValid(value));
  set_has_adx_slot_type();
  adx_slot_type_ = value;
  // @@protoc_insertion_point(field_set:ComRequest.AdxSlot.adx_slot_type)
}

// optional .ComRequest.AdxSlot.Banner banner = 4;
inline bool ComRequest_AdxSlot::has_banner() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ComRequest_AdxSlot::set_has_banner() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ComRequest_AdxSlot::clear_has_banner() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ComRequest_AdxSlot::clear_banner() {
  if (banner_ != NULL) banner_->::ComRequest_AdxSlot_Banner::Clear();
  clear_has_banner();
}
inline const ::ComRequest_AdxSlot_Banner& ComRequest_AdxSlot::banner() const {
  // @@protoc_insertion_point(field_get:ComRequest.AdxSlot.banner)
  return banner_ != NULL ? *banner_ : *default_instance_->banner_;
}
inline ::ComRequest_AdxSlot_Banner* ComRequest_AdxSlot::mutable_banner() {
  set_has_banner();
  if (banner_ == NULL) banner_ = new ::ComRequest_AdxSlot_Banner;
  // @@protoc_insertion_point(field_mutable:ComRequest.AdxSlot.banner)
  return banner_;
}
inline ::ComRequest_AdxSlot_Banner* ComRequest_AdxSlot::release_banner() {
  clear_has_banner();
  ::ComRequest_AdxSlot_Banner* temp = banner_;
  banner_ = NULL;
  return temp;
}
inline void ComRequest_AdxSlot::set_allocated_banner(::ComRequest_AdxSlot_Banner* banner) {
  delete banner_;
  banner_ = banner;
  if (banner) {
    set_has_banner();
  } else {
    clear_has_banner();
  }
  // @@protoc_insertion_point(field_set_allocated:ComRequest.AdxSlot.banner)
}

// optional .ComRequest.AdxSlot.Native native = 5;
inline bool ComRequest_AdxSlot::has_native() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ComRequest_AdxSlot::set_has_native() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ComRequest_AdxSlot::clear_has_native() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ComRequest_AdxSlot::clear_native() {
  if (native_ != NULL) native_->::ComRequest_AdxSlot_Native::Clear();
  clear_has_native();
}
inline const ::ComRequest_AdxSlot_Native& ComRequest_AdxSlot::native() const {
  // @@protoc_insertion_point(field_get:ComRequest.AdxSlot.native)
  return native_ != NULL ? *native_ : *default_instance_->native_;
}
inline ::ComRequest_AdxSlot_Native* ComRequest_AdxSlot::mutable_native() {
  set_has_native();
  if (native_ == NULL) native_ = new ::ComRequest_AdxSlot_Native;
  // @@protoc_insertion_point(field_mutable:ComRequest.AdxSlot.native)
  return native_;
}
inline ::ComRequest_AdxSlot_Native* ComRequest_AdxSlot::release_native() {
  clear_has_native();
  ::ComRequest_AdxSlot_Native* temp = native_;
  native_ = NULL;
  return temp;
}
inline void ComRequest_AdxSlot::set_allocated_native(::ComRequest_AdxSlot_Native* native) {
  delete native_;
  native_ = native;
  if (native) {
    set_has_native();
  } else {
    clear_has_native();
  }
  // @@protoc_insertion_point(field_set_allocated:ComRequest.AdxSlot.native)
}

// optional .ComRequest.AdxSlot.Video video = 6;
inline bool ComRequest_AdxSlot::has_video() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ComRequest_AdxSlot::set_has_video() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ComRequest_AdxSlot::clear_has_video() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ComRequest_AdxSlot::clear_video() {
  if (video_ != NULL) video_->::ComRequest_AdxSlot_Video::Clear();
  clear_has_video();
}
inline const ::ComRequest_AdxSlot_Video& ComRequest_AdxSlot::video() const {
  // @@protoc_insertion_point(field_get:ComRequest.AdxSlot.video)
  return video_ != NULL ? *video_ : *default_instance_->video_;
}
inline ::ComRequest_AdxSlot_Video* ComRequest_AdxSlot::mutable_video() {
  set_has_video();
  if (video_ == NULL) video_ = new ::ComRequest_AdxSlot_Video;
  // @@protoc_insertion_point(field_mutable:ComRequest.AdxSlot.video)
  return video_;
}
inline ::ComRequest_AdxSlot_Video* ComRequest_AdxSlot::release_video() {
  clear_has_video();
  ::ComRequest_AdxSlot_Video* temp = video_;
  video_ = NULL;
  return temp;
}
inline void ComRequest_AdxSlot::set_allocated_video(::ComRequest_AdxSlot_Video* video) {
  delete video_;
  video_ = video;
  if (video) {
    set_has_video();
  } else {
    clear_has_video();
  }
  // @@protoc_insertion_point(field_set_allocated:ComRequest.AdxSlot.video)
}

// optional int32 price_floor = 7;
inline bool ComRequest_AdxSlot::has_price_floor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ComRequest_AdxSlot::set_has_price_floor() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ComRequest_AdxSlot::clear_has_price_floor() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ComRequest_AdxSlot::clear_price_floor() {
  price_floor_ = 0;
  clear_has_price_floor();
}
inline ::google::protobuf::int32 ComRequest_AdxSlot::price_floor() const {
  // @@protoc_insertion_point(field_get:ComRequest.AdxSlot.price_floor)
  return price_floor_;
}
inline void ComRequest_AdxSlot::set_price_floor(::google::protobuf::int32 value) {
  set_has_price_floor();
  price_floor_ = value;
  // @@protoc_insertion_point(field_set:ComRequest.AdxSlot.price_floor)
}

// -------------------------------------------------------------------

// ComRequest_Device_DeviceID

// optional string id = 1;
inline bool ComRequest_Device_DeviceID::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComRequest_Device_DeviceID::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComRequest_Device_DeviceID::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComRequest_Device_DeviceID::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& ComRequest_Device_DeviceID::id() const {
  // @@protoc_insertion_point(field_get:ComRequest.Device.DeviceID.id)
  return *id_;
}
inline void ComRequest_Device_DeviceID::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:ComRequest.Device.DeviceID.id)
}
inline void ComRequest_Device_DeviceID::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:ComRequest.Device.DeviceID.id)
}
inline void ComRequest_Device_DeviceID::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ComRequest.Device.DeviceID.id)
}
inline ::std::string* ComRequest_Device_DeviceID::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ComRequest.Device.DeviceID.id)
  return id_;
}
inline ::std::string* ComRequest_Device_DeviceID::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComRequest_Device_DeviceID::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ComRequest.Device.DeviceID.id)
}

// optional .ComRequest.Device.DeviceIdType type = 2;
inline bool ComRequest_Device_DeviceID::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComRequest_Device_DeviceID::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ComRequest_Device_DeviceID::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ComRequest_Device_DeviceID::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ComRequest_Device_DeviceIdType ComRequest_Device_DeviceID::type() const {
  // @@protoc_insertion_point(field_get:ComRequest.Device.DeviceID.type)
  return static_cast< ::ComRequest_Device_DeviceIdType >(type_);
}
inline void ComRequest_Device_DeviceID::set_type(::ComRequest_Device_DeviceIdType value) {
  assert(::ComRequest_Device_DeviceIdType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ComRequest.Device.DeviceID.type)
}

// -------------------------------------------------------------------

// ComRequest_Device

// repeated .ComRequest.Device.DeviceID device_id = 1;
inline int ComRequest_Device::device_id_size() const {
  return device_id_.size();
}
inline void ComRequest_Device::clear_device_id() {
  device_id_.Clear();
}
inline const ::ComRequest_Device_DeviceID& ComRequest_Device::device_id(int index) const {
  // @@protoc_insertion_point(field_get:ComRequest.Device.device_id)
  return device_id_.Get(index);
}
inline ::ComRequest_Device_DeviceID* ComRequest_Device::mutable_device_id(int index) {
  // @@protoc_insertion_point(field_mutable:ComRequest.Device.device_id)
  return device_id_.Mutable(index);
}
inline ::ComRequest_Device_DeviceID* ComRequest_Device::add_device_id() {
  // @@protoc_insertion_point(field_add:ComRequest.Device.device_id)
  return device_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ComRequest_Device_DeviceID >&
ComRequest_Device::device_id() const {
  // @@protoc_insertion_point(field_list:ComRequest.Device.device_id)
  return device_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::ComRequest_Device_DeviceID >*
ComRequest_Device::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable_list:ComRequest.Device.device_id)
  return &device_id_;
}

// optional .ComRequest.Device.DeviceType device_type = 2;
inline bool ComRequest_Device::has_device_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComRequest_Device::set_has_device_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ComRequest_Device::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ComRequest_Device::clear_device_type() {
  device_type_ = 0;
  clear_has_device_type();
}
inline ::ComRequest_Device_DeviceType ComRequest_Device::device_type() const {
  // @@protoc_insertion_point(field_get:ComRequest.Device.device_type)
  return static_cast< ::ComRequest_Device_DeviceType >(device_type_);
}
inline void ComRequest_Device::set_device_type(::ComRequest_Device_DeviceType value) {
  assert(::ComRequest_Device_DeviceType_IsValid(value));
  set_has_device_type();
  device_type_ = value;
  // @@protoc_insertion_point(field_set:ComRequest.Device.device_type)
}

// optional .ComRequest.Device.OS os = 3;
inline bool ComRequest_Device::has_os() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ComRequest_Device::set_has_os() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ComRequest_Device::clear_has_os() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ComRequest_Device::clear_os() {
  os_ = 0;
  clear_has_os();
}
inline ::ComRequest_Device_OS ComRequest_Device::os() const {
  // @@protoc_insertion_point(field_get:ComRequest.Device.os)
  return static_cast< ::ComRequest_Device_OS >(os_);
}
inline void ComRequest_Device::set_os(::ComRequest_Device_OS value) {
  assert(::ComRequest_Device_OS_IsValid(value));
  set_has_os();
  os_ = value;
  // @@protoc_insertion_point(field_set:ComRequest.Device.os)
}

// optional string os_version = 4;
inline bool ComRequest_Device::has_os_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ComRequest_Device::set_has_os_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ComRequest_Device::clear_has_os_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ComRequest_Device::clear_os_version() {
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_version_->clear();
  }
  clear_has_os_version();
}
inline const ::std::string& ComRequest_Device::os_version() const {
  // @@protoc_insertion_point(field_get:ComRequest.Device.os_version)
  return *os_version_;
}
inline void ComRequest_Device::set_os_version(const ::std::string& value) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(value);
  // @@protoc_insertion_point(field_set:ComRequest.Device.os_version)
}
inline void ComRequest_Device::set_os_version(const char* value) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:ComRequest.Device.os_version)
}
inline void ComRequest_Device::set_os_version(const char* value, size_t size) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ComRequest.Device.os_version)
}
inline ::std::string* ComRequest_Device::mutable_os_version() {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    os_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ComRequest.Device.os_version)
  return os_version_;
}
inline ::std::string* ComRequest_Device::release_os_version() {
  clear_has_os_version();
  if (os_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = os_version_;
    os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComRequest_Device::set_allocated_os_version(::std::string* os_version) {
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_version_;
  }
  if (os_version) {
    set_has_os_version();
    os_version_ = os_version;
  } else {
    clear_has_os_version();
    os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ComRequest.Device.os_version)
}

// optional .ComRequest.Device.Carrier carrier = 5;
inline bool ComRequest_Device::has_carrier() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ComRequest_Device::set_has_carrier() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ComRequest_Device::clear_has_carrier() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ComRequest_Device::clear_carrier() {
  carrier_ = 0;
  clear_has_carrier();
}
inline ::ComRequest_Device_Carrier ComRequest_Device::carrier() const {
  // @@protoc_insertion_point(field_get:ComRequest.Device.carrier)
  return static_cast< ::ComRequest_Device_Carrier >(carrier_);
}
inline void ComRequest_Device::set_carrier(::ComRequest_Device_Carrier value) {
  assert(::ComRequest_Device_Carrier_IsValid(value));
  set_has_carrier();
  carrier_ = value;
  // @@protoc_insertion_point(field_set:ComRequest.Device.carrier)
}

// optional .ComRequest.Device.Connection connection = 6;
inline bool ComRequest_Device::has_connection() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ComRequest_Device::set_has_connection() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ComRequest_Device::clear_has_connection() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ComRequest_Device::clear_connection() {
  connection_ = 0;
  clear_has_connection();
}
inline ::ComRequest_Device_Connection ComRequest_Device::connection() const {
  // @@protoc_insertion_point(field_get:ComRequest.Device.connection)
  return static_cast< ::ComRequest_Device_Connection >(connection_);
}
inline void ComRequest_Device::set_connection(::ComRequest_Device_Connection value) {
  assert(::ComRequest_Device_Connection_IsValid(value));
  set_has_connection();
  connection_ = value;
  // @@protoc_insertion_point(field_set:ComRequest.Device.connection)
}

// optional string brand = 7;
inline bool ComRequest_Device::has_brand() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ComRequest_Device::set_has_brand() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ComRequest_Device::clear_has_brand() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ComRequest_Device::clear_brand() {
  if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_->clear();
  }
  clear_has_brand();
}
inline const ::std::string& ComRequest_Device::brand() const {
  // @@protoc_insertion_point(field_get:ComRequest.Device.brand)
  return *brand_;
}
inline void ComRequest_Device::set_brand(const ::std::string& value) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_ = new ::std::string;
  }
  brand_->assign(value);
  // @@protoc_insertion_point(field_set:ComRequest.Device.brand)
}
inline void ComRequest_Device::set_brand(const char* value) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_ = new ::std::string;
  }
  brand_->assign(value);
  // @@protoc_insertion_point(field_set_char:ComRequest.Device.brand)
}
inline void ComRequest_Device::set_brand(const char* value, size_t size) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_ = new ::std::string;
  }
  brand_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ComRequest.Device.brand)
}
inline ::std::string* ComRequest_Device::mutable_brand() {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ComRequest.Device.brand)
  return brand_;
}
inline ::std::string* ComRequest_Device::release_brand() {
  clear_has_brand();
  if (brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = brand_;
    brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComRequest_Device::set_allocated_brand(::std::string* brand) {
  if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete brand_;
  }
  if (brand) {
    set_has_brand();
    brand_ = brand;
  } else {
    clear_has_brand();
    brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ComRequest.Device.brand)
}

// optional string model = 8;
inline bool ComRequest_Device::has_model() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ComRequest_Device::set_has_model() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ComRequest_Device::clear_has_model() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ComRequest_Device::clear_model() {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_->clear();
  }
  clear_has_model();
}
inline const ::std::string& ComRequest_Device::model() const {
  // @@protoc_insertion_point(field_get:ComRequest.Device.model)
  return *model_;
}
inline void ComRequest_Device::set_model(const ::std::string& value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set:ComRequest.Device.model)
}
inline void ComRequest_Device::set_model(const char* value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set_char:ComRequest.Device.model)
}
inline void ComRequest_Device::set_model(const char* value, size_t size) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ComRequest.Device.model)
}
inline ::std::string* ComRequest_Device::mutable_model() {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ComRequest.Device.model)
  return model_;
}
inline ::std::string* ComRequest_Device::release_model() {
  clear_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = model_;
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComRequest_Device::set_allocated_model(::std::string* model) {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (model) {
    set_has_model();
    model_ = model;
  } else {
    clear_has_model();
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ComRequest.Device.model)
}

// optional string user_agent = 9;
inline bool ComRequest_Device::has_user_agent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ComRequest_Device::set_has_user_agent() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ComRequest_Device::clear_has_user_agent() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ComRequest_Device::clear_user_agent() {
  if (user_agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_agent_->clear();
  }
  clear_has_user_agent();
}
inline const ::std::string& ComRequest_Device::user_agent() const {
  // @@protoc_insertion_point(field_get:ComRequest.Device.user_agent)
  return *user_agent_;
}
inline void ComRequest_Device::set_user_agent(const ::std::string& value) {
  set_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_agent_ = new ::std::string;
  }
  user_agent_->assign(value);
  // @@protoc_insertion_point(field_set:ComRequest.Device.user_agent)
}
inline void ComRequest_Device::set_user_agent(const char* value) {
  set_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_agent_ = new ::std::string;
  }
  user_agent_->assign(value);
  // @@protoc_insertion_point(field_set_char:ComRequest.Device.user_agent)
}
inline void ComRequest_Device::set_user_agent(const char* value, size_t size) {
  set_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_agent_ = new ::std::string;
  }
  user_agent_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ComRequest.Device.user_agent)
}
inline ::std::string* ComRequest_Device::mutable_user_agent() {
  set_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_agent_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ComRequest.Device.user_agent)
  return user_agent_;
}
inline ::std::string* ComRequest_Device::release_user_agent() {
  clear_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_agent_;
    user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComRequest_Device::set_allocated_user_agent(::std::string* user_agent) {
  if (user_agent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_agent_;
  }
  if (user_agent) {
    set_has_user_agent();
    user_agent_ = user_agent;
  } else {
    clear_has_user_agent();
    user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ComRequest.Device.user_agent)
}

// optional string ip = 10;
inline bool ComRequest_Device::has_ip() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ComRequest_Device::set_has_ip() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ComRequest_Device::clear_has_ip() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ComRequest_Device::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ComRequest_Device::ip() const {
  // @@protoc_insertion_point(field_get:ComRequest.Device.ip)
  return *ip_;
}
inline void ComRequest_Device::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:ComRequest.Device.ip)
}
inline void ComRequest_Device::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:ComRequest.Device.ip)
}
inline void ComRequest_Device::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ComRequest.Device.ip)
}
inline ::std::string* ComRequest_Device::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ComRequest.Device.ip)
  return ip_;
}
inline ::std::string* ComRequest_Device::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComRequest_Device::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ComRequest.Device.ip)
}

// -------------------------------------------------------------------

// ComRequest_App

// optional string app_id = 1;
inline bool ComRequest_App::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComRequest_App::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComRequest_App::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComRequest_App::clear_app_id() {
  if (app_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_id_->clear();
  }
  clear_has_app_id();
}
inline const ::std::string& ComRequest_App::app_id() const {
  // @@protoc_insertion_point(field_get:ComRequest.App.app_id)
  return *app_id_;
}
inline void ComRequest_App::set_app_id(const ::std::string& value) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(value);
  // @@protoc_insertion_point(field_set:ComRequest.App.app_id)
}
inline void ComRequest_App::set_app_id(const char* value) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:ComRequest.App.app_id)
}
inline void ComRequest_App::set_app_id(const char* value, size_t size) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ComRequest.App.app_id)
}
inline ::std::string* ComRequest_App::mutable_app_id() {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ComRequest.App.app_id)
  return app_id_;
}
inline ::std::string* ComRequest_App::release_app_id() {
  clear_has_app_id();
  if (app_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = app_id_;
    app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComRequest_App::set_allocated_app_id(::std::string* app_id) {
  if (app_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_id_;
  }
  if (app_id) {
    set_has_app_id();
    app_id_ = app_id;
  } else {
    clear_has_app_id();
    app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ComRequest.App.app_id)
}

// optional int32 app_category = 2;
inline bool ComRequest_App::has_app_category() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComRequest_App::set_has_app_category() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ComRequest_App::clear_has_app_category() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ComRequest_App::clear_app_category() {
  app_category_ = 0;
  clear_has_app_category();
}
inline ::google::protobuf::int32 ComRequest_App::app_category() const {
  // @@protoc_insertion_point(field_get:ComRequest.App.app_category)
  return app_category_;
}
inline void ComRequest_App::set_app_category(::google::protobuf::int32 value) {
  set_has_app_category();
  app_category_ = value;
  // @@protoc_insertion_point(field_set:ComRequest.App.app_category)
}

// -------------------------------------------------------------------

// ComRequest

// optional int32 adx = 1;
inline bool ComRequest::has_adx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComRequest::set_has_adx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComRequest::clear_has_adx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComRequest::clear_adx() {
  adx_ = 0;
  clear_has_adx();
}
inline ::google::protobuf::int32 ComRequest::adx() const {
  // @@protoc_insertion_point(field_get:ComRequest.adx)
  return adx_;
}
inline void ComRequest::set_adx(::google::protobuf::int32 value) {
  set_has_adx();
  adx_ = value;
  // @@protoc_insertion_point(field_set:ComRequest.adx)
}

// optional string bid = 2;
inline bool ComRequest::has_bid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComRequest::set_has_bid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ComRequest::clear_has_bid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ComRequest::clear_bid() {
  if (bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_->clear();
  }
  clear_has_bid();
}
inline const ::std::string& ComRequest::bid() const {
  // @@protoc_insertion_point(field_get:ComRequest.bid)
  return *bid_;
}
inline void ComRequest::set_bid(const ::std::string& value) {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_ = new ::std::string;
  }
  bid_->assign(value);
  // @@protoc_insertion_point(field_set:ComRequest.bid)
}
inline void ComRequest::set_bid(const char* value) {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_ = new ::std::string;
  }
  bid_->assign(value);
  // @@protoc_insertion_point(field_set_char:ComRequest.bid)
}
inline void ComRequest::set_bid(const char* value, size_t size) {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_ = new ::std::string;
  }
  bid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ComRequest.bid)
}
inline ::std::string* ComRequest::mutable_bid() {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ComRequest.bid)
  return bid_;
}
inline ::std::string* ComRequest::release_bid() {
  clear_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bid_;
    bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComRequest::set_allocated_bid(::std::string* bid) {
  if (bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_;
  }
  if (bid) {
    set_has_bid();
    bid_ = bid;
  } else {
    clear_has_bid();
    bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ComRequest.bid)
}

// repeated .ComRequest.AdxSlot adx_slot = 3;
inline int ComRequest::adx_slot_size() const {
  return adx_slot_.size();
}
inline void ComRequest::clear_adx_slot() {
  adx_slot_.Clear();
}
inline const ::ComRequest_AdxSlot& ComRequest::adx_slot(int index) const {
  // @@protoc_insertion_point(field_get:ComRequest.adx_slot)
  return adx_slot_.Get(index);
}
inline ::ComRequest_AdxSlot* ComRequest::mutable_adx_slot(int index) {
  // @@protoc_insertion_point(field_mutable:ComRequest.adx_slot)
  return adx_slot_.Mutable(index);
}
inline ::ComRequest_AdxSlot* ComRequest::add_adx_slot() {
  // @@protoc_insertion_point(field_add:ComRequest.adx_slot)
  return adx_slot_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ComRequest_AdxSlot >&
ComRequest::adx_slot() const {
  // @@protoc_insertion_point(field_list:ComRequest.adx_slot)
  return adx_slot_;
}
inline ::google::protobuf::RepeatedPtrField< ::ComRequest_AdxSlot >*
ComRequest::mutable_adx_slot() {
  // @@protoc_insertion_point(field_mutable_list:ComRequest.adx_slot)
  return &adx_slot_;
}

// optional .ComRequest.Device device = 4;
inline bool ComRequest::has_device() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ComRequest::set_has_device() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ComRequest::clear_has_device() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ComRequest::clear_device() {
  if (device_ != NULL) device_->::ComRequest_Device::Clear();
  clear_has_device();
}
inline const ::ComRequest_Device& ComRequest::device() const {
  // @@protoc_insertion_point(field_get:ComRequest.device)
  return device_ != NULL ? *device_ : *default_instance_->device_;
}
inline ::ComRequest_Device* ComRequest::mutable_device() {
  set_has_device();
  if (device_ == NULL) device_ = new ::ComRequest_Device;
  // @@protoc_insertion_point(field_mutable:ComRequest.device)
  return device_;
}
inline ::ComRequest_Device* ComRequest::release_device() {
  clear_has_device();
  ::ComRequest_Device* temp = device_;
  device_ = NULL;
  return temp;
}
inline void ComRequest::set_allocated_device(::ComRequest_Device* device) {
  delete device_;
  device_ = device;
  if (device) {
    set_has_device();
  } else {
    clear_has_device();
  }
  // @@protoc_insertion_point(field_set_allocated:ComRequest.device)
}

// optional .ComRequest.App app = 5;
inline bool ComRequest::has_app() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ComRequest::set_has_app() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ComRequest::clear_has_app() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ComRequest::clear_app() {
  if (app_ != NULL) app_->::ComRequest_App::Clear();
  clear_has_app();
}
inline const ::ComRequest_App& ComRequest::app() const {
  // @@protoc_insertion_point(field_get:ComRequest.app)
  return app_ != NULL ? *app_ : *default_instance_->app_;
}
inline ::ComRequest_App* ComRequest::mutable_app() {
  set_has_app();
  if (app_ == NULL) app_ = new ::ComRequest_App;
  // @@protoc_insertion_point(field_mutable:ComRequest.app)
  return app_;
}
inline ::ComRequest_App* ComRequest::release_app() {
  clear_has_app();
  ::ComRequest_App* temp = app_;
  app_ = NULL;
  return temp;
}
inline void ComRequest::set_allocated_app(::ComRequest_App* app) {
  delete app_;
  app_ = app;
  if (app) {
    set_has_app();
  } else {
    clear_has_app();
  }
  // @@protoc_insertion_point(field_set_allocated:ComRequest.app)
}

// -------------------------------------------------------------------

// ComResponse_AdxSlot

// optional string adx_slot_id = 1;
inline bool ComResponse_AdxSlot::has_adx_slot_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComResponse_AdxSlot::set_has_adx_slot_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComResponse_AdxSlot::clear_has_adx_slot_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComResponse_AdxSlot::clear_adx_slot_id() {
  if (adx_slot_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adx_slot_id_->clear();
  }
  clear_has_adx_slot_id();
}
inline const ::std::string& ComResponse_AdxSlot::adx_slot_id() const {
  // @@protoc_insertion_point(field_get:ComResponse.AdxSlot.adx_slot_id)
  return *adx_slot_id_;
}
inline void ComResponse_AdxSlot::set_adx_slot_id(const ::std::string& value) {
  set_has_adx_slot_id();
  if (adx_slot_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adx_slot_id_ = new ::std::string;
  }
  adx_slot_id_->assign(value);
  // @@protoc_insertion_point(field_set:ComResponse.AdxSlot.adx_slot_id)
}
inline void ComResponse_AdxSlot::set_adx_slot_id(const char* value) {
  set_has_adx_slot_id();
  if (adx_slot_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adx_slot_id_ = new ::std::string;
  }
  adx_slot_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:ComResponse.AdxSlot.adx_slot_id)
}
inline void ComResponse_AdxSlot::set_adx_slot_id(const char* value, size_t size) {
  set_has_adx_slot_id();
  if (adx_slot_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adx_slot_id_ = new ::std::string;
  }
  adx_slot_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ComResponse.AdxSlot.adx_slot_id)
}
inline ::std::string* ComResponse_AdxSlot::mutable_adx_slot_id() {
  set_has_adx_slot_id();
  if (adx_slot_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adx_slot_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ComResponse.AdxSlot.adx_slot_id)
  return adx_slot_id_;
}
inline ::std::string* ComResponse_AdxSlot::release_adx_slot_id() {
  clear_has_adx_slot_id();
  if (adx_slot_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = adx_slot_id_;
    adx_slot_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComResponse_AdxSlot::set_allocated_adx_slot_id(::std::string* adx_slot_id) {
  if (adx_slot_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adx_slot_id_;
  }
  if (adx_slot_id) {
    set_has_adx_slot_id();
    adx_slot_id_ = adx_slot_id;
  } else {
    clear_has_adx_slot_id();
    adx_slot_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ComResponse.AdxSlot.adx_slot_id)
}

// optional int32 adx_slot_sequence_id = 2;
inline bool ComResponse_AdxSlot::has_adx_slot_sequence_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComResponse_AdxSlot::set_has_adx_slot_sequence_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ComResponse_AdxSlot::clear_has_adx_slot_sequence_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ComResponse_AdxSlot::clear_adx_slot_sequence_id() {
  adx_slot_sequence_id_ = 0;
  clear_has_adx_slot_sequence_id();
}
inline ::google::protobuf::int32 ComResponse_AdxSlot::adx_slot_sequence_id() const {
  // @@protoc_insertion_point(field_get:ComResponse.AdxSlot.adx_slot_sequence_id)
  return adx_slot_sequence_id_;
}
inline void ComResponse_AdxSlot::set_adx_slot_sequence_id(::google::protobuf::int32 value) {
  set_has_adx_slot_sequence_id();
  adx_slot_sequence_id_ = value;
  // @@protoc_insertion_point(field_set:ComResponse.AdxSlot.adx_slot_sequence_id)
}

// optional .ComResponse.AdxSlot.AdxSlotType adx_slot_type = 3;
inline bool ComResponse_AdxSlot::has_adx_slot_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ComResponse_AdxSlot::set_has_adx_slot_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ComResponse_AdxSlot::clear_has_adx_slot_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ComResponse_AdxSlot::clear_adx_slot_type() {
  adx_slot_type_ = 0;
  clear_has_adx_slot_type();
}
inline ::ComResponse_AdxSlot_AdxSlotType ComResponse_AdxSlot::adx_slot_type() const {
  // @@protoc_insertion_point(field_get:ComResponse.AdxSlot.adx_slot_type)
  return static_cast< ::ComResponse_AdxSlot_AdxSlotType >(adx_slot_type_);
}
inline void ComResponse_AdxSlot::set_adx_slot_type(::ComResponse_AdxSlot_AdxSlotType value) {
  assert(::ComResponse_AdxSlot_AdxSlotType_IsValid(value));
  set_has_adx_slot_type();
  adx_slot_type_ = value;
  // @@protoc_insertion_point(field_set:ComResponse.AdxSlot.adx_slot_type)
}

// optional int32 price = 4;
inline bool ComResponse_AdxSlot::has_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ComResponse_AdxSlot::set_has_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ComResponse_AdxSlot::clear_has_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ComResponse_AdxSlot::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 ComResponse_AdxSlot::price() const {
  // @@protoc_insertion_point(field_get:ComResponse.AdxSlot.price)
  return price_;
}
inline void ComResponse_AdxSlot::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:ComResponse.AdxSlot.price)
}

// optional string template = 5;
inline bool ComResponse_AdxSlot::has_template_() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ComResponse_AdxSlot::set_has_template_() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ComResponse_AdxSlot::clear_has_template_() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ComResponse_AdxSlot::clear_template_() {
  if (template__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    template__->clear();
  }
  clear_has_template_();
}
inline const ::std::string& ComResponse_AdxSlot::template_() const {
  // @@protoc_insertion_point(field_get:ComResponse.AdxSlot.template)
  return *template__;
}
inline void ComResponse_AdxSlot::set_template_(const ::std::string& value) {
  set_has_template_();
  if (template__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    template__ = new ::std::string;
  }
  template__->assign(value);
  // @@protoc_insertion_point(field_set:ComResponse.AdxSlot.template)
}
inline void ComResponse_AdxSlot::set_template_(const char* value) {
  set_has_template_();
  if (template__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    template__ = new ::std::string;
  }
  template__->assign(value);
  // @@protoc_insertion_point(field_set_char:ComResponse.AdxSlot.template)
}
inline void ComResponse_AdxSlot::set_template_(const char* value, size_t size) {
  set_has_template_();
  if (template__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    template__ = new ::std::string;
  }
  template__->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ComResponse.AdxSlot.template)
}
inline ::std::string* ComResponse_AdxSlot::mutable_template_() {
  set_has_template_();
  if (template__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    template__ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ComResponse.AdxSlot.template)
  return template__;
}
inline ::std::string* ComResponse_AdxSlot::release_template_() {
  clear_has_template_();
  if (template__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = template__;
    template__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComResponse_AdxSlot::set_allocated_template_(::std::string* template_) {
  if (template__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete template__;
  }
  if (template_) {
    set_has_template_();
    template__ = template_;
  } else {
    clear_has_template_();
    template__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ComResponse.AdxSlot.template)
}

// optional string ext = 6;
inline bool ComResponse_AdxSlot::has_ext() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ComResponse_AdxSlot::set_has_ext() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ComResponse_AdxSlot::clear_has_ext() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ComResponse_AdxSlot::clear_ext() {
  if (ext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ext_->clear();
  }
  clear_has_ext();
}
inline const ::std::string& ComResponse_AdxSlot::ext() const {
  // @@protoc_insertion_point(field_get:ComResponse.AdxSlot.ext)
  return *ext_;
}
inline void ComResponse_AdxSlot::set_ext(const ::std::string& value) {
  set_has_ext();
  if (ext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ext_ = new ::std::string;
  }
  ext_->assign(value);
  // @@protoc_insertion_point(field_set:ComResponse.AdxSlot.ext)
}
inline void ComResponse_AdxSlot::set_ext(const char* value) {
  set_has_ext();
  if (ext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ext_ = new ::std::string;
  }
  ext_->assign(value);
  // @@protoc_insertion_point(field_set_char:ComResponse.AdxSlot.ext)
}
inline void ComResponse_AdxSlot::set_ext(const char* value, size_t size) {
  set_has_ext();
  if (ext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ext_ = new ::std::string;
  }
  ext_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ComResponse.AdxSlot.ext)
}
inline ::std::string* ComResponse_AdxSlot::mutable_ext() {
  set_has_ext();
  if (ext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ext_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ComResponse.AdxSlot.ext)
  return ext_;
}
inline ::std::string* ComResponse_AdxSlot::release_ext() {
  clear_has_ext();
  if (ext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ext_;
    ext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComResponse_AdxSlot::set_allocated_ext(::std::string* ext) {
  if (ext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ext_;
  }
  if (ext) {
    set_has_ext();
    ext_ = ext;
  } else {
    clear_has_ext();
    ext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ComResponse.AdxSlot.ext)
}

// -------------------------------------------------------------------

// ComResponse

// optional string bid = 1;
inline bool ComResponse::has_bid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComResponse::set_has_bid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComResponse::clear_has_bid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComResponse::clear_bid() {
  if (bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_->clear();
  }
  clear_has_bid();
}
inline const ::std::string& ComResponse::bid() const {
  // @@protoc_insertion_point(field_get:ComResponse.bid)
  return *bid_;
}
inline void ComResponse::set_bid(const ::std::string& value) {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_ = new ::std::string;
  }
  bid_->assign(value);
  // @@protoc_insertion_point(field_set:ComResponse.bid)
}
inline void ComResponse::set_bid(const char* value) {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_ = new ::std::string;
  }
  bid_->assign(value);
  // @@protoc_insertion_point(field_set_char:ComResponse.bid)
}
inline void ComResponse::set_bid(const char* value, size_t size) {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_ = new ::std::string;
  }
  bid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ComResponse.bid)
}
inline ::std::string* ComResponse::mutable_bid() {
  set_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ComResponse.bid)
  return bid_;
}
inline ::std::string* ComResponse::release_bid() {
  clear_has_bid();
  if (bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bid_;
    bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComResponse::set_allocated_bid(::std::string* bid) {
  if (bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_;
  }
  if (bid) {
    set_has_bid();
    bid_ = bid;
  } else {
    clear_has_bid();
    bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ComResponse.bid)
}

// repeated .ComResponse.AdxSlot adx_slot = 2;
inline int ComResponse::adx_slot_size() const {
  return adx_slot_.size();
}
inline void ComResponse::clear_adx_slot() {
  adx_slot_.Clear();
}
inline const ::ComResponse_AdxSlot& ComResponse::adx_slot(int index) const {
  // @@protoc_insertion_point(field_get:ComResponse.adx_slot)
  return adx_slot_.Get(index);
}
inline ::ComResponse_AdxSlot* ComResponse::mutable_adx_slot(int index) {
  // @@protoc_insertion_point(field_mutable:ComResponse.adx_slot)
  return adx_slot_.Mutable(index);
}
inline ::ComResponse_AdxSlot* ComResponse::add_adx_slot() {
  // @@protoc_insertion_point(field_add:ComResponse.adx_slot)
  return adx_slot_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ComResponse_AdxSlot >&
ComResponse::adx_slot() const {
  // @@protoc_insertion_point(field_list:ComResponse.adx_slot)
  return adx_slot_;
}
inline ::google::protobuf::RepeatedPtrField< ::ComResponse_AdxSlot >*
ComResponse::mutable_adx_slot() {
  // @@protoc_insertion_point(field_mutable_list:ComResponse.adx_slot)
  return &adx_slot_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ComRequest_AdxSlot_AdxSlotType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ComRequest_AdxSlot_AdxSlotType>() {
  return ::ComRequest_AdxSlot_AdxSlotType_descriptor();
}
template <> struct is_proto_enum< ::ComRequest_Device_DeviceIdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ComRequest_Device_DeviceIdType>() {
  return ::ComRequest_Device_DeviceIdType_descriptor();
}
template <> struct is_proto_enum< ::ComRequest_Device_DeviceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ComRequest_Device_DeviceType>() {
  return ::ComRequest_Device_DeviceType_descriptor();
}
template <> struct is_proto_enum< ::ComRequest_Device_OS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ComRequest_Device_OS>() {
  return ::ComRequest_Device_OS_descriptor();
}
template <> struct is_proto_enum< ::ComRequest_Device_Carrier> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ComRequest_Device_Carrier>() {
  return ::ComRequest_Device_Carrier_descriptor();
}
template <> struct is_proto_enum< ::ComRequest_Device_Connection> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ComRequest_Device_Connection>() {
  return ::ComRequest_Device_Connection_descriptor();
}
template <> struct is_proto_enum< ::ComResponse_AdxSlot_AdxSlotType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ComResponse_AdxSlot_AdxSlotType>() {
  return ::ComResponse_AdxSlot_AdxSlotType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_adx_5fcom_2eproto__INCLUDED
